<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta charset="utf-8" />
    <meta name="title" content="Brutal.io" />
    <meta
      name="keywords"
      content="brutalio, brutal, flail, black hole, io, game, games, web game, html5, fun, flash"
    />
    <meta
      name="description"
      content="Brutal.io - Massive multiplayer online game! Control your car and throw your flail against other players! Play with millions of players around the world and reach number one!"
    />
    <meta property="og:title" content="Brutal.io" />
    <meta
      property="og:description"
      content="Brutal.io - Massive multiplayer online game! Control your car and throw your flail against other players! Play with millions of players around the world and reach number one!"
    />
    <meta property="og:url" content="http://brutal.io/" />
    <meta property="og:image" content="http://brutal.io/images/thumbnail.png" />
    <meta property="og:image:type" content="image/png" />
    <meta property="og:type" content="website" />
    <link rel="stylesheet" type="text/css" href="css/bootstrap.min.css" />
    <link rel="stylesheet" type="text/css" href="css/main-notmin.css" />
    <!-- <link rel="stylesheet" type="text/css" href="css/main.css?v=7" /> -->
    <link rel="canonical" href="https://brutal.io/" />
    <link id="favicon" rel="icon" type="image/png" href="images/favicon.png" />
    <title>Brutal!</title>

    <script>
      window.startTime = +new Date();
      window.didSendLoadingTime = false;
    </script>
    <script
      async
      src="//platform.twitter.com/widgets.js"
      charset="utf-8"
    ></script>

    <script type="text/javascript">
      (function (f, b) {
        if (!b.__SV) {
          var e, g, i, h;
          window.mixpanel = b;
          b._i = [];
          b.init = function (e, f, c) {
            function g(a, d) {
              var b = d.split(".");
              2 == b.length && ((a = a[b[0]]), (d = b[1]));
              a[d] = function () {
                a.push([d].concat(Array.prototype.slice.call(arguments, 0)));
              };
            }
            var a = b;
            "undefined" !== typeof c ? (a = b[c] = []) : (c = "mixpanel");
            a.people = a.people || [];
            a.toString = function (a) {
              var d = "mixpanel";
              "mixpanel" !== c && (d += "." + c);
              a || (d += " (stub)");
              return d;
            };
            a.people.toString = function () {
              return a.toString(1) + ".people (stub)";
            };
            i =
              "disable time_event track track_pageview track_links track_forms track_with_groups add_group set_group remove_group register register_once alias unregister identify name_tag set_config reset opt_in_tracking opt_out_tracking has_opted_in_tracking has_opted_out_tracking clear_opt_in_out_tracking start_batch_senders people.set people.set_once people.unset people.increment people.append people.union people.track_charge people.clear_charges people.delete_user people.remove".split(
                " "
              );
            for (h = 0; h < i.length; h++) g(a, i[h]);
            var j = "set set_once union unset remove delete".split(" ");
            a.get_group = function () {
              function b(c) {
                d[c] = function () {
                  call2_args = arguments;
                  call2 = [c].concat(Array.prototype.slice.call(call2_args, 0));
                  a.push([e, call2]);
                };
              }
              for (
                var d = {},
                  e = ["get_group"].concat(
                    Array.prototype.slice.call(arguments, 0)
                  ),
                  c = 0;
                c < j.length;
                c++
              )
                b(j[c]);
              return d;
            };
            b._i.push([e, f, c]);
          };
          b.__SV = 1.2;
          e = f.createElement("script");
          e.type = "text/javascript";
          e.async = !0;
          e.src =
            "undefined" !== typeof MIXPANEL_CUSTOM_LIB_URL
              ? MIXPANEL_CUSTOM_LIB_URL
              : "file:" === f.location.protocol &&
                "//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js".match(/^\/\//)
              ? "https://cdn.mxpnl.com/libs/mixpanel-2-latest.min.js"
              : "//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js";
          g = f.getElementsByTagName("script")[0];
          g.parentNode.insertBefore(e, g);
        }
      })(document, window.mixpanel || []);
    </script>

    <script
      async
      src="https://hb.vntsm.com/v4/live/vms/sites/brutal.io/index.js"
    ></script>
    <script>
      self.__VM = self.__VM || [];
      self.__VM.push(function (admanager, scope) {
        scope.Config.get("leaderboard").displayMany(["slot-1", "slot-3"]);
        scope.Config.get("mpu").display("slot-2");
        scope.Config.get("skyscraper").display("slot-4");
      });
    </script>
    <style>
      #slot-1 {
        display: none !important;
      }
      #slot-3 {
        display: none !important;
      }
      #slot-4 {
        display: none !important;
      }

      @media screen and (min-height: 600px) {
        #slot-4 {
          display: block !important;
        }
      }
    </style>

    <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-3gJwYp4gk6k6F3+5l5vlaQt1zArQXd23LSeXqBF3Suo=" crossorigin="anonymous"></script>
    <script src="lib/advertisement.js"></script>
    <style id="dynamic-styles-slot-1">
      @media screen and (min-width: 300px) {
        #slot-1 {
          display: block !important;
        }
      }
    </style>
    <style id="dynamic-styles-slot-3">
      @media screen and (min-width: 300px) {
        #slot-3 {
          display: block !important;
        }
      }
    </style>
  </head>
  <body data-feedly-mini="yes">
    <canvas id="canvas"></canvas>
    <div id="fps"></div>
    <div
      id="overlay"
      style="
        display: none;
        position: absolute;
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
        background-color: rgba(0, 50, 50, 0.5);
        z-index: 2;
      "
    />
    <div
      id="mainDialog"
      style="
        width: 510px;
        background-color: rgba(0, 50, 50, 0);
        margin: 10px auto;
        border-radius: 15px;
        padding: 5px 15px 5px 15px;
        position: absolute;
        top: 17%;
        left: 50%;
        transform-origin: top center;
        transform: translate(-50%, 0%);
        -ms-transform: translate(-50%, 0%);
        -ms-transform-origin: top center;
        -webkit-transform: translate(-50%, 0%);
        -webkit-transform-origin: top center;
      "
    >
      <img
        id="pfText"
        src="images/logo.png"
        style="
          position: absolute;
          top: -70%;
          left: 50%;
          transform: translate(-50%, 0%);
          -ms-transform: translate(-50%, 0%);
          -webkit-transform: translate(-50%, 0%);
        "
      />
      <div id="tips" class="basic-text">GRAB ENERGY TO GROW YOUR FLAIL!</div>
      <div style="height: 50px"></div>
      <form role="form">
        <div class="form-group">
          <div id="topGui" style="height: 100px">
            <div id="nickInput" style="height: 50px">
              <center>
                <input
                  id="nick"
                  type="text"
                  class="form-control input-nick"
                  placeholder="Type a Nickname..."
                  maxlength="15"
                  onkeydown="if (event.keyCode == 13) document.getElementById('playButton').click()"
                  autofocus
                />
              </center>
            </div>
            <center>
              <div style="line-height: 50%"><br /></div>
              <button
                disabled
                type="submit"
                id="playButton"
                onclick="clickPlay(document.getElementById('nick').value); return false;"
                class="btn btn-play btn-primary btn-needs-server"
              >
                <div class="basic-text">PLAY</div>
              </button>
            </center>
            <br clear="both" />
          </div>
          <div
            hidden
            id="topGuiConnecting"
            class="basic-text"
            style="height: 84px; transform: translateY(30%)"
          >
            <h3><center>Connecting...</center></h3>
          </div>
          <div hidden id="roomFailed" style="height: 90px">
            <div class="basic-text">
              <h4>
                <center>
                  <div id="linkText" style="font-size: 30px">
                    SERVER IS FULL!
                  </div>
                  <br />CLICK CONTINUE TO JOIN ANOTHER SERVER.
                </center>
              </h4>
            </div>
            <br />
            <form role="form">
              <div class="form-group">
                <center>
                  <button
                    type="submit"
                    id="continueButton"
                    onclick="setContinue(); return false;"
                    class="btn btn-play btn-primary"
                  >
                    <div class="basic-text">CONTINUE</div>
                  </button>
                </center>
              </div>
            </form>
          </div>
          <br />
          <!-- center ad -->
          <div
            id="slot-2"
            class="brutal_center_venatus"
            style="top: 145%"
          ></div>
        </div>
      </form>
    </div>
    <!-- Top Leaderboard -->
    <div id="slot-1" class="brutal_leaderboard_venatus" style="top: 0%"></div>

    <!-- left ad -->
    <div
      id="slot-4"
      style="position: fixed; top: 50%; left: 0%; transform: translate(0, -50%)"
    ></div>

    <script async src="ads.js" charset="utf-8"></script>
    <footer
      id="firstRightBox"
      class="rightBoxNews"
      style="width: 155px; height: 108px"
    >
      <center>
        <font style="font-weight: bold; font-size: 12px"
          >Updated 10 Oct 2024</font
        >
      </center>
      <div style="line-height: 50%"><br /></div>
      <font style="font-size: 14px"
        ><b>• Added new game </b><br /><b
          ><a href="https://mechazilla.io" style="margin-left: 10px"
            >Mechazilla.io</a
          ></b
        >
      </font>
      <div style="line-height: 60%"><br /></div>
      <div style="text-align: right">
        <a href="/more_info"
          ><font class="basic-text2" style="font-weight: bold; font-size: 10px"
            >TELL ME MORE</font
          ></a
        >
      </div>
    </footer>
    <footer hidden id="afterRightBox" class="rightBoxSmall">
      <button
        type="submit"
        class="btn btn-primary basic-text2 btn-more"
        onclick="window.location.href='/more_info';  return false;"
      >
        TELL ME MORE
      </button>
    </footer>
    <footer
      id="mobileBoxId"
      class="mobileBox"
      style="width: 185px; height: 180px"
    >
      <div style="height: 10px"></div>
      <center><img src="images/banner_mobile_text2.png" /></center>
      <div style="line-height: 60%"><br /></div>
      <center>
        <a href="http://itunes.apple.com/app/id1214758633" target="_blank"
          ><img src="images/badge_ios.png"/></a
        >
        <div style="height: 10px"></div>
        <a
          href="https://play.google.com/store/apps/details?id=io.brutal.client.mobile"
          target="_blank"
          ><img src="images/badge_android.png"
        /></a>
      </center>
    </footer>
    <footer id="linksID" class="linkBox" style="bottom: 110px">
      <a href="https://twitter.com/AndredAlmeida">
        <img src="images/twitter.png"
      /></a>
      <a href="https://discord.gg/4xsQ7pw7B2" target="_blank">
        <img src="images/discord.png"
      /></a>
    </footer>
    <footer hidden id="copyLink" class="leftBox">
      <a href="javascript:copyRoomLink();"
        ><font class="basic-text2" style="font-weight: bold; font-size: 15px"
          >COPY ROOM LINK</font
        >
        <font style="font-weight: bold; font-size: 15px">
          <img
            id="pfArrow"
            src="images/playfriendsarrow.png"
            style="
              position: absolute;
              top: 100%;
              left: 20%;
              transform: translate(0%, 20%);
              -ms-transform: translate(0%, 20%);
              -webkit-transform: translate(0%, 20%);
            "
          />
          <img
            id="pfText"
            src="images/playfriendstext.png"
            style="
              position: absolute;
              top: 238%;
              left: 41%;
              transform: translate(0%, 20%);
              -ms-transform: translate(0%, 20%);
              -webkit-transform: translate(0%, 20%);
            "
          />
          <footer hidden id="copyLinkBox" class="leftBox">
            <div style="line-height: 50%"><br /></div>
            <font style="font-weight: bold; font-size: 15px" class="basic-text2"
              >SHARE THIS LINK WITH YOUR FRIENDS!</font
            >
            <div style="line-height: 50%"><br /></div>
            <center>
              <div id="linkInput" style="height: 43px; width: 90%">
                <input
                  id="roomlinkInput"
                  class="linkInput form-control input-copylink"
                  readonly
                  style="cursor: text"
                />
              </div>
            </center>

            <div
              hidden
              id="safariTooltip"
              style="
                width: 160px;
                height: 20px;
                background-color: rgba(0, 0, 0, 0.6);
                margin: 10px auto;
                border-radius: 5px;
                padding: 5px 15px 5px 15px;
                position: relative;
                top: 0%;
                left: 0%;
                transform-origin: top center;
                transform: translate(0%, 0%);
                -ms-transform: translate(0%, 0%);
                -ms-transform-origin: top center;
                -webkit-transform: translate(0%, -30%);
              "
            >
              <font
                style="
                  position: relative;
                  top: -5px;
                  font-weight: bold;
                  font-size: 13px;
                  color: #ffffff;
                "
                >Press ⌘+C to Copy!</font
              >
            </div>

            <button
              id="copyButton"
              type="submit"
              onclick="setCopy(); return false;"
              class="btn btn-copy btn-primary basic-text2"
            >
              COPY
            </button>

            <div style="line-height: 50%"><br /></div>
          </footer>
          F
          <!-- bottom leaderboard -->
          <div
            id="slot-3-wrapper"
            style="
              position: fixed;
              height: 30px;
              width: calc(728px + 36px);
              bottom: 5px;
              left: calc(50% - 18px);
              transform: translate(-50%, 0%);
              background: rgba(0, 0, 0, 0);
              border-radius: 14px 14px 14px 14px;
              z-index: 9999;
              pointer-events: none;
            "
          >
            <button
              onclick="window.clickCloseAd();"
              style="
                position: absolute;
                left: 2px;
                bottom: 1px;
                background: rgba(0, 0, 0, 0.2);
                color: #777777;
                border: none;
                border-radius: 12px;
                width: 24px;
                height: 24px;
                line-height: 24px;
                text-align: center;
                cursor: pointer;
                box-shadow: 1px 1px 3px #000;
                z-index: 10000;
                pointer-events: auto;
              "
            >
              X
            </button>
          </div>
          <div
            id="slot-3"
            class="brutal_leaderboard_venatus"
            style="bottom: 0%"
          >
            <div
              hidden
              id="overlay2"
              style="
                position: absolute;
                left: 0;
                right: 0;
                top: 0;
                bottom: 0;
                background-color: rgba(0, 100, 100, 0.25);
                z-index: 2;
              "
            >
              <div
                style="
                  width: 280px;
                  height: 180px;
                  background-color: rgba(0, 0, 0, 0.85);
                  margin: 10px auto;
                  border-radius: 15px;
                  padding: 5px 15px 5px 15px;
                  position: absolute;
                  top: 35%;
                  left: 50%;
                  transform-origin: top center;
                  transform: translate(-50%, 0%);
                  -ms-transform: translate(-50%, 0%);
                  -ms-transform-origin: top center;
                  -webkit-transform: translate(-50%, 0%);
                  -webkit-transform-origin: top center;
                "
              >
                <center>
                  <font
                    face="Arial Black, Arial, sans-serif"
                    style="
                      position: relative;
                      top: 30px;
                      font-weight: bold;
                      font-size: 28px;
                      color: #00ffff;
                      text-shadow: #00ffff 0 0 5px;
                    "
                    >LINK COPIED!</font
                  >
                  <img
                    id="copycheckimage"
                    src="images/copycheck.png"
                    style="position: relative; top: 43px"
                  />
                </center>
              </div>
            </div>
            <script>
              (function (i, s, o, g, r, a, m) {
                i["GoogleAnalyticsObject"] = r;
                (i[r] =
                  i[r] ||
                  function () {
                    (i[r].q = i[r].q || []).push(arguments);
                  }),
                  (i[r].l = 1 * new Date());
                (a = s.createElement(o)), (m = s.getElementsByTagName(o)[0]);
                a.async = 1;
                a.src = g;
                m.parentNode.insertBefore(a, m);
              })(
                window,
                document,
                "script",
                "https://www.google-analytics.com/analytics.js",
                "ga"
              );

              ga("create", "UA-93742751-1", "auto");
              ga("send", "pageview");
            </script>

            <script src="lib/modernizr-custom.js"></script>
            <script src="lib/Stats.js"></script>
            <script>
              (function (n, t, m) {
                var $a, ab, sa, ta;
                function bb() {
                  var b = -1 < navigator.userAgent.indexOf("Chrome"),
                    f = -1 < navigator.userAgent.indexOf("Safari");
                  b && f && (f = !1);
                  return f;
                }
                function cb() {
                  var b = "LOW";
                  R && (b = "HIGH");
                  var f = m("#graphicsID")[0];
                  f && (f.childNodes[0].data = "GRAPHICS: " + b);
                }
                function db() {
                  m("#copycheckimage").hide();
                  m("#copyLink").show();
                  m("#copyLinkBox").hide();
                  m("#overlay2").fadeIn(200);
                  m("#pfArrow").hide();
                  m("#pfText").hide();
                  setTimeout(function () {
                    m("#copycheckimage").fadeIn(300);
                  }, 200);
                  setTimeout(function () {
                    m("#overlay2").fadeOut(200);
                  }, 1e3);
                  ua = !1;
                }
                function vb() {
                  p && p.disconnect();
                }
                function eb() {
                  m("#overlay").hide();
                  S = !1;
                }
                function wb() {
                  m("#overlay").fadeIn(500);
                  Fa();
                }
                function fb() {
                  S = !0;
                  K || (w = null);
                  setTimeout(wb, 1e3);
                }
                function Ga() {
                  try {
                    return n.self !== n.top;
                  } catch (b) {
                    return !0;
                  }
                }
                function Ha() {
                  return (
                    !n.localStorage.tutorial || 3 > n.localStorage.tutorial
                  );
                }
                function Fa() {
                  n.mixpanel &&
                    n.mixpanel.track("Ad Impression Opportunity", {
                      domain: n.location.hostname,
                    });
                }
                function gb(b, f, k, g, d, e) {
                  for (var h = 6, a = -1; 2 > a; a += 2) {
                    1 == a && (h = 6);
                    for (var l = 0; l < h; l++) {
                      b.save();
                      b.translate(f, k);
                      b.rotate(((l / h) * 2 * Math.PI - g) * a);
                      var c = 20 * d;
                      -1 == a
                        ? b.translate((50 + c) * e, 0)
                        : b.translate((57 + 1.4 * c) * e, 0);
                      b.scale(0.9 * e, 0.9 * e);
                      q.frames["powerup_part" + (1 + (l % 3))].draw(b);
                      b.restore();
                    }
                  }
                }
                function va(b, f) {
                  for (var k = ""; ; ) {
                    var g = b.getUint16(f, !0);
                    f += 2;
                    if (0 == g) break;
                    k += String.fromCharCode(g);
                  }
                  return { nick: k, offset: f };
                }
                function hb(b, f, k) {
                  var g = y.getBounds();
                  return b + k >= g[0].x &&
                    b - k <= g[1].x &&
                    f + k >= g[0].y &&
                    f - k <= g[1].y
                    ? !0
                    : !1;
                }
                function T(b, f, k) {
                  return b < f ? f : b > k ? k : b;
                }
                function ga(b, f, k, g) {
                  b && (this._size = b);
                  f && (this._color = f);
                  this._stroke = !!k;
                  g && (this._strokeColor = g);
                }
                function ka(b) {
                  "" == b && (b = "<Unnamed>");
                  return b;
                }
                function da(b, f, k, g, d, e) {
                  e /= 2;
                  b.beginPath();
                  b.moveTo(f, k + e);
                  b.lineTo(f, k + d - e);
                  b.quadraticCurveTo(f, k + d, f + e, k + d);
                  b.lineTo(f + g - e, k + d);
                  b.quadraticCurveTo(f + g, k + d, f + g, k + d - e);
                  b.lineTo(f + g, k + e);
                  b.quadraticCurveTo(f + g, k, f + g - e, k);
                  b.lineTo(f + e, k);
                  b.quadraticCurveTo(f, k, f, k + e);
                  b.closePath();
                  b.fill();
                }
                function xb(b, f, k, g, d, e) {
                  e /= 2;
                  b.beginPath();
                  b.moveTo(f, k + e);
                  b.lineTo(f, k + d);
                  b.lineTo(f + g, k + d);
                  b.lineTo(f + g, k + e);
                  b.quadraticCurveTo(f + g, k, f + g - e, k);
                  b.lineTo(f + e, k);
                  b.quadraticCurveTo(f, k, f, k + e);
                  b.closePath();
                  b.fill();
                }
                function ib(b, f, k) {
                  var g = b * Math.cos(k) - f * Math.sin(k);
                  b = f * Math.cos(k) + b * Math.sin(k);
                  return { x: g, y: b };
                }
                var Ia = n.location.href.split("/"),
                  wa = Ia[2],
                  yb = wa.split(".");
                lastPart = Ia[Ia.length - 1];
                var H = !1,
                  Ja = yb.length;
                2 < Ja && (H = !H);
                var Ka = "https:" == n.location.protocol;
                n.mixpanel &&
                  n.mixpanel.init("208ce64093308da8075ba320f97c12fd", {
                    debug: !1,
                    track_pageview: !0,
                    persistence: "localStorage",
                  });
                var zb =
                    n.location != n.parent.location
                      ? t.referrer
                      : t.location.href,
                  Ab = "brutal.io".replace(".", "-") + ".";
                // Improved frame-busting technique
                if (window.top !== window.self) {
                  window.top.location = window.self.location;
                }
                var W = (1e3 / 30) * 3,
                  L,
                  jb = 0,
                  kb = 0,
                  Q,
                  $,
                  K = !1,
                  U = !0,
                  La = !1,
                  D = 0,
                  Ma = 0,
                  C = 1600,
                  J = 5e3,
                  oa = 1,
                  S = !0,
                  Na = 1,
                  Oa = !1,
                  lb = n.localStorage.muteVol,
                  s = 1,
                  Bb = 0,
                  R = !0,
                  Pa = !1,
                  ea = 1.2,
                  xa = 1.2,
                  Qa = !1,
                  mb = 0,
                  nb = !1,
                  ha = !1,
                  Z = 1,
                  Ra = !1,
                  Cb = 0,
                  Db = 8,
                  la = 0,
                  Sa = 0,
                  Ta = 0,
                  Ua,
                  Va,
                  ob,
                  pb,
                  qb = 0,
                  aa = 0,
                  Wa = !0,
                  Xa = !0,
                  Ya = !1,
                  E,
                  V,
                  q,
                  p,
                  A = {},
                  w,
                  N = 0,
                  y,
                  B,
                  rb,
                  F,
                  ya,
                  fa = {},
                  ua = !1,
                  M = 0,
                  ba = !1;
                (function () {
                  var b = n.location.search;
                  "?" == b.charAt(0) && (b = b.slice(1));
                  for (var b = b.split("&"), f = 0; f < b.length; f++) {
                    var k = b[f].split("=");
                    fa[k[0]] = k[1];
                  }
                })();
                n.stats = fa.stats ? !0 : !1;
                "true" == n.localStorage.lq && (R = !1);
                var za = null,
                  sb = function () {
                    var b = "";
                    Ka && (b = "s");
                    m.get(
                      "http" + b + "://ip2l.wings.io/cc",
                      function (b) {
                        za = b.substring(0, 2);
                        n.localStorage.brutalCC = za;
                        n.localStorage.brutalCCTime = +new Date();
                      },
                      "text"
                    );
                  };
                void 0 == n.localStorage.brutalCCTime ||
                (void 0 != n.localStorage.brutalCC &&
                  2 != n.localStorage.brutalCC.length)
                  ? sb()
                  : 288e5 < +new Date() - n.localStorage.brutalCCTime
                  ? sb()
                  : (za = n.localStorage.brutalCC);
                var Za = function () {
                  D = +new Date();
                  var b = 0;
                  0 < Ma && (b = D - Ma);
                  Ma = D;
                  E.update(b);
                  E.draw(b);
                  n.requestAnimationFrame && n.requestAnimationFrame(Za);
                  La && (La = !1);
                };
                t.body.onselectstart = function () {
                  return !1;
                };
                n.clickPlay = function (b) {
                  K
                    ? eb()
                    : ((ha = !1),
                      (Z = 1),
                      (n.localStorage.nick = b),
                      Bb++,
                      (L.mouseMoved = !1),
                      p.sendNick(b, Oa),
                      Oa &&
                        (m("#continueTop").hide(),
                        m("#continueBR").hide(),
                        m("#continue").hide(),
                        m("#nickInput").show(),
                        m("#skinPanel").hide(),
                        m("#howto").show(),
                        m("#beta").show(),
                        (Oa = !1)));
                };
                n.setContinue = function () {
                  m("#topGui").show();
                  m("#roomFailed").hide();
                  m("#tips").show();
                  Ga() || (parent.location.hash = "");
                  p.getServerAndConnect();
                };
                n.toggleGraphics = function () {
                  R = !R;
                  E.resize();
                  n.localStorage.lq = !R;
                  cb();
                };
                n.copyRoomLink = function () {
                  m("#copyLink").hide();
                  m("#copyLinkBox").show();
                  var b = m("#roomlinkInput")[0];
                  // Sanitize roomID to allow only alphanumeric and dashes
                  var safeRoomID = (p.roomID || "").toString().replace(/[^a-zA-Z0-9\-]/g, "");
                  b.value = "http://brutal.io/#" + safeRoomID;
                  var safeRoomID = typeof p.roomID === "string" && /^[a-zA-Z0-9\-]+$/.test(p.roomID) ? p.roomID : "";
                  b.value = "http://brutal.io/#" + safeRoomID;
                  ua = !0;
                  bb() &&
                    ((m("#copyButton")[0].childNodes[0].data = "Close"),
                    m("#safariTooltip").show());
                  setTimeout(function () {
                    b.setSelectionRange(0, b.value.length);
                    b.select();
                    b.focus();
                  }, 100);
                };
                n.setCopy = function () {
                  var b = m("#roomlinkInput")[0];
                  b.value = "http://brutal.io/#" + p.roomID;
                  b.setSelectionRange(0, b.value.length);
                  b.select();
                  b.focus();
                  if (bb())
                    m("#copyLinkBox").hide(), m("#copyLink").show(), (ua = !1);
                  else {
                    try {
                      t.execCommand("copy");
                    } catch (f) {}
                    db();
                  }
                };
                n.clickNoNames = function (b) {
                  Pa = !Pa;
                  b.checked = Pa;
                };
                void 0 == lb && (lb = 1);
                var tb = n.navigator.userAgent;
                -1 < tb.indexOf("MSIE ") || tb.indexOf("Trident/");
                "undefined" !== typeof n.orientation &&
                  (n.location.href =
                    "https://itunes.apple.com/us/app/wings.io/id1098205567?l=pt&ls=1&mt=8");
                var Aa;
                n.onblur = function () {
                  n.didSendLoadingTime = !0;
                  H || (Aa = setTimeout(vb, 3e5));
                  U = !1;
                };
                n.onfocus = function () {
                  Aa && (clearTimeout(Aa), (Aa = null));
                  La = U = !0;
                  for (var b in A) A[b].resume();
                };
                n.localStorage.nick &&
                  (m("#nick")[0].value = n.localStorage.nick);
                var ma = 0,
                  Ba = 0;
                setInterval(function () {
                  if (S) {
                    var b = m("#tips")[0];
                    ma += 0.08;
                    var f = (Math.sin(ma) + 1) / 2;
                    if (ma > 1.5 * Math.PI) {
                      Ba++;
                      3 < Ba && (Ba = 0);
                      ma -= 2 * Math.PI;
                      var k;
                      switch (Ba) {
                        case 0:
                          k = "GRAB ENERGY TO GROW YOUR FLAIL!";
                          break;
                        case 1:
                          k = "CLICK TO THROW FLAIL!";
                          break;
                        case 2:
                          k = "CLICK AND HOLD TO ATTRACT FLAIL AGAIN!";
                          break;
                        default:
                          k = "DESTROY OTHER PLAYER'S CAR WITH YOUR FLAIL!";
                      }
                      b.innerHTML = k;
                    }
                    b.style.opacity = Math.sqrt(f, 5);
                  }
                }, 50);
                n.onbeforeunload = function () {
                  if (K) return "Are you sure you want to quit?";
                };
                t.oncontextmenu = function () {
                  return !1;
                };
                Fa();
                ga.prototype = {
                  _value: "",
                  _color: "#000000",
                  _stroke: !1,
                  _strokeColor: "#000000",
                  _strokeWidth: 3,
                  _size: 16,
                  _canvas: null,
                  _ctx: null,
                  _dirty: !1,
                  _scale: 1,
                  _font: "px 'proxima-nova-1','proxima-nova-2', Arial Black",
                  _usingRoundedFrame: !1,
                  _hmargin: 0,
                  _vmargin: -1,
                  _margin: 6,
                  _frameOpacity: 0.3,
                  _shadowBlur: 0,
                  _roundedFrameStyle: "#006666",
                  _addTop: 0,
                  _minWidth: 0,
                  setAddTop: function (b) {
                    b != this._addTop &&
                      ((this._addTop = b), (this._dirty = !0));
                  },
                  setMinWidth: function (b) {
                    b != this._minWidth &&
                      ((this._minWidth = b), (this._dirty = !0));
                  },
                  setFont: function (b) {
                    this._font != b && ((this._font = b), (this._dirty = !0));
                  },
                  setSize: function (b) {
                    this._size != b && ((this._size = b), (this._dirty = !0));
                  },
                  setScale: function (b) {
                    this._scale != b && ((this._scale = b), (this._dirty = !0));
                  },
                  setColor: function (b) {
                    this._color != b && ((this._color = b), (this._dirty = !0));
                  },
                  setStroke: function (b) {
                    this._stroke != b &&
                      ((this._stroke = b), (this._dirty = !0));
                  },
                  setShadowBlur: function (b) {
                    this._shadowBlur != b &&
                      ((this._shadowBlur = b), (this._dirty = !0));
                  },
                  setStrokeWidth: function (b) {
                    this._strokeWidth != b &&
                      ((this._strokeWidth = b), (this._dirty = !0));
                  },
                  setStrokeColor: function (b) {
                    this._strokeColor != b &&
                      ((this._strokeColor = b), (this._dirty = !0));
                  },
                  setValue: function (b) {
                    b != this._value && ((this._value = b), (this._dirty = !0));
                  },
                  setHMargin: function (b) {
                    b != this._hmargin &&
                      ((this._hmargin = b), (this._dirty = !0));
                  },
                  setVMargin: function (b) {
                    b != this._vmargin &&
                      ((this._vmargin = b), (this._dirty = !0));
                  },
                  setMargin: function (b) {
                    b != this._margin &&
                      ((this._margin = b), (this._dirty = !0));
                  },
                  setUsingRoundedFrame: function (b) {
                    b != this._usingRoundedFrame &&
                      ((this._usingRoundedFrame = b), (this._dirty = !0));
                  },
                  setRoundedFrameOpacity: function (b) {
                    b != this._frameOpacity &&
                      ((this._frameOpacity = b), (this._dirty = !0));
                  },
                  setRoundedFrameStyle: function (b) {
                    b != this._roundedFrameStyle &&
                      ((this._roundedFrameStyle = b), (this._dirty = !0));
                  },
                  render: function () {
                    null == this._canvas &&
                      ((this._canvas = t.createElement("canvas")),
                      (this._ctx = this._canvas.getContext("2d")));
                    if (this._dirty) {
                      this._dirty = !1;
                      var b = this._canvas,
                        f = this._ctx,
                        k = this._value,
                        g = this._scale,
                        d = this._size,
                        e = "Bold " + d + this._font;
                      f.font = e;
                      var h = f.measureText(k).width,
                        a = 0;
                      h < this._minWidth &&
                        ((a = this._minWidth - h), (h = this._minWidth));
                      var d = d - 0.1 * d,
                        l = this._margin;
                      this._shadowBlur > l && (l = this._shadowBlur);
                      b.width = (h + 2 + 2 * l) * g;
                      b.height = (d + 2 * l + this._addTop) * g;
                      f.font = e;
                      f.textBaseline = "middle";
                      f.scale(g, g);
                      f.globalAlpha = 1;
                      this._usingRoundedFrame &&
                        ((f.fillStyle = this._roundedFrameStyle),
                        (f.globalAlpha = this._frameOpacity),
                        da(f, 0, 0, b.width, b.height, 30),
                        (f.globalAlpha = 1));
                      b = l + a / 2;
                      d = l + this._addTop + d / 2;
                      f.fillStyle = this._color;
                      this._stroke &&
                        ((f.lineJoin = "round"),
                        (f.lineWidth = this._strokeWidth),
                        (f.strokeStyle = this._strokeColor),
                        f.strokeText(k, b, d));
                      0 < this._shadowBlur &&
                        ((f.shadowBlur = this._shadowBlur),
                        (f.shadowColor = this._strokeColor));
                      f.fillText(k, b, d);
                    }
                    return this._canvas;
                  },
                };
                var Eb = function () {
                    this.loaded = !1;
                    this.onLoad = null;
                    this.gameSheet;
                    this.spriteSheetLoaded = !1;
                    this.splashScreen;
                    this.splashScreenLoaded = !1;
                    this.frames = {};
                    this.whiteCarGlow =
                      this.gridMask =
                      this.bgGridOn =
                      this.bgGrid2 =
                      this.bgGrid =
                        null;
                    this.loadSplashScreen = function () {
                      this.splashScreen = new Image();
                      this.splashScreen.src = "images/splashscreen.jpg";
                      this.splashScreen.onload = function () {
                        q.splashScreenLoaded = !0;
                        E.updateBackgroundImage();
                      };
                    };
                    this.loadGameSpritesheet = function () {
                      this.gameSheet = new Image();
                      this.gameSheet.src = "images/sheet.png";
                      this.gameSheet.onload = function () {
                        q.loadGameSpritesheetFrames();
                        q.spriteSheetLoaded = !0;
                        q.loadPatterns();
                        q.loadAnimations();
                        q.whiteCarGlow =
                          q.frames.car_l3_min_glow.renderTintedFrame("#AAAAAA");
                        q.loaded = !0;
                        q.onLoad();
                      };
                    };
                    this.loadPatterns = function () {
                      var b = q.frames.grid.renderToCanvas();
                      q.bgGrid = E.context.createPattern(b, "repeat");
                      b = q.frames.core_charge.renderToCanvas();
                      q.bgCoreCharge = E.context.createPattern(b, "repeat");
                      b = q.frames.core.renderToCanvas();
                      q.bgCore = E.context.createPattern(b, "repeat");
                      b = q.frames.grid_red.renderToCanvas();
                      q.bgGridRed = E.context.createPattern(b, "repeat");
                      b = q.frames.grid_green.renderToCanvas();
                      q.bgGridGreen = E.context.createPattern(b, "repeat");
                    };
                    this.loadGameSpritesheetFrames = function () {
                      for (var b = gameSheetInfo.length, f = 0; f < b; f++) {
                        var k = gameSheetInfo[f],
                          g = new Ca();
                        g.setFrameInfo(k, this.gameSheet);
                        this.frames[k[0]] = g;
                      }
                    };
                    this.loadAnimations = function () {};
                    this.load = function (b) {
                      this.onLoad = b;
                      this.loadGameSpritesheet();
                      this.loadSplashScreen();
                    };
                    this.loadTintImage = function (b, f, k) {
                      var g = t.createElement("canvas"),
                        d = g.getContext("2d"),
                        e = b.width,
                        h = b.height;
                      g.width = e;
                      g.height = h;
                      var a = t.createElement("canvas");
                      a.width = e;
                      a.height = h;
                      e = a.getContext("2d");
                      e.fillStyle = k;
                      e.fillRect(0, 0, a.width, a.height);
                      e.globalCompositeOperation = "destination-atop";
                      e.drawImage(b, 0, 0);
                      d.globalAlpha = 1;
                      d.drawImage(a, 0, 0);
                      f(g);
                    };
                  },
                  Fb = function () {
                    var b = this;
                    this.angle = Math.PI;
                    this.throttle = 0;
                    this.rotationValue = 0.1;
                    this.varAngle = 0;
                    this.mouseMoved = !1;
                    b.keydown = function (b) {
                      67 == b.keyCode && S && ua
                        ? setTimeout(function () {
                            db();
                          }, 10)
                        : S ||
                          (32 == b.keyCode
                            ? K && p.sendClick(!0)
                            : 188 != b.keyCode &&
                              49 != b.keyCode &&
                              (222 == b.keyCode
                                ? (Wa = !Wa)
                                : 51 != b.keyCode &&
                                  52 != b.keyCode &&
                                  53 != b.keyCode &&
                                  54 != b.keyCode &&
                                  (55 == b.keyCode && H
                                    ? (Ya = !Ya)
                                    : 56 == b.keyCode
                                    ? (drawBackground = !drawBackground)
                                    : 57 == b.keyCode
                                    ? (Xa = !Xa)
                                    : 48 != b.keyCode &&
                                      (75 == b.keyCode
                                        ? H && p.leave()
                                        : 27 == b.keyCode
                                        ? (m("#overlay").show(),
                                          Fa(),
                                          (S = !0),
                                          K || (w = null))
                                        : 70 == b.keyCode
                                        ? (t.fullscreenElement ||
                                          t.mozFullScreenElement ||
                                          t.webkitFullscreenElement ||
                                          t.msFullscreenElement
                                            ? t.exitFullscreen
                                              ? t.exitFullscreen()
                                              : t.msExitFullscreen
                                              ? t.msExitFullscreen()
                                              : t.mozCancelFullScreen
                                              ? t.mozCancelFullScreen()
                                              : t.webkitExitFullscreen &&
                                                t.webkitExitFullscreen()
                                            : t.documentElement
                                                .requestFullscreen
                                            ? t.documentElement.requestFullscreen()
                                            : t.documentElement
                                                .msRequestFullscreen
                                            ? t.documentElement.msRequestFullscreen()
                                            : t.documentElement
                                                .mozRequestFullScreen
                                            ? t.documentElement.mozRequestFullScreen()
                                            : t.documentElement
                                                .webkitRequestFullscreen &&
                                              t.documentElement.webkitRequestFullscreen(
                                                Element.ALLOW_KEYBOARD_INPUT
                                              ),
                                          B.clearTip())
                                        : 79 != b.keyCode &&
                                          90 == b.keyCode &&
                                          K &&
                                          H &&
                                          (Qa = !Qa)))));
                    };
                    b.keyup = function (b) {
                      S ||
                        32 != b.keyCode ||
                        (K
                          ? p.sendClick(!1)
                          : 1 == oa
                          ? ((oa = 0), E.followTopPlayer())
                          : ((oa = 1), (w = null)));
                    };
                    b.mousedown = function (b) {
                      S || (K && 0 == b.button && p.sendClick(!0));
                    };
                    b.mouseup = function (b) {
                      S || (K && 0 == b.button && p.sendClick(!1));
                    };
                    b.mousemove = function (f) {
                      S ||
                        ((b.mouseMoved = !0),
                        (jb = f.clientX),
                        (kb = f.clientY));
                    };
                    this.addListeners = function () {
                      t.addEventListener("mousedown", b.mousedown, !1);
                      t.addEventListener("mousemove", b.mousemove, !1);
                      t.addEventListener("mouseup", b.mouseup, !1);
                      t.addEventListener("keydown", b.keydown, !1);
                      t.addEventListener("keyup", b.keyup, !1);
                    };
                  },
                  Gb = function () {
                    var b = [];
                    this.draw = function (f) {
                      for (var k = [], g = b.length, d = 0; d < g; d++) {
                        var e = b[d];
                        e.a -= 0.1;
                        0 < e.a
                          ? (f.save(),
                            f.beginPath(),
                            (f.fillStyle = e.style),
                            (f.globalAlpha = e.a),
                            f.arc(
                              e.x,
                              e.y,
                              50 * Math.sqrt(1 - e.a),
                              0,
                              2 * Math.PI
                            ),
                            f.closePath(),
                            f.fill(),
                            f.restore())
                          : k.push(e);
                      }
                      for (f = 0; f < k.length; f++)
                        (g = b.indexOf(k[f])), b.splice(g, 1);
                      k.length = 0;
                    };
                    this.addExplosion = function (f, k, g) {
                      var d = {};
                      d.x = f;
                      d.y = k;
                      d.a = 1;
                      d.style = g;
                      b.push(d);
                    };
                  },
                  Hb = function () {
                    var b,
                      f,
                      k,
                      g = 0,
                      d = !0,
                      e,
                      h,
                      a,
                      l,
                      c,
                      r,
                      z,
                      G,
                      I,
                      x = !1,
                      v,
                      u,
                      n,
                      m,
                      p,
                      O,
                      P,
                      ja,
                      pa = 0,
                      qa = !0,
                      X = 300,
                      na = !1,
                      Da = null,
                      y = null,
                      ra = 0,
                      Ea = 0,
                      A = 0,
                      B = !1,
                      C = null,
                      E = -1,
                      D = 0.02,
                      L,
                      J = D,
                      F = 0,
                      H = null,
                      M = 0,
                      U = "",
                      R,
                      V = !1,
                      ca = null,
                      Z = 0,
                      T = 0.02,
                      W = T,
                      Y = 0,
                      ia = null,
                      ea = "",
                      aa,
                      fa = 0,
                      ba = 0;
                    this.draw = function (v) {
                      if (0 < g && !ha) {
                        var n = 0,
                          I = +new Date() - g;
                        4e3 > I
                          ? (n = 3e3 > I ? 1 : 1 - (I - 3e3) / 1e3)
                          : (g = 0);
                        I = !1;
                        if (!e) {
                          var m = 30;
                          k
                            ? ((h = new ga(50 * s, "#00FFFF", !1, "#00AAAA")),
                              h.setValue(k),
                              h.setUsingRoundedFrame(!0),
                              (I = !0),
                              h.setAddTop(35),
                              h.setShadowBlur(4))
                            : ((h = null), (m = 35));
                          e = new ga(m * s, "#00FFFF", !1, "#00AAAA");
                          e.setValue(f);
                          e.setUsingRoundedFrame(!I);
                          e.setShadowBlur(3);
                          k || e.setAddTop(-2);
                        }
                        m = 0.21 * canvas.height;
                        d ||
                          ((m = 0.55 * canvas.height),
                          e.setColor("#f90600"),
                          e.setStrokeColor("#f90600"),
                          e.setRoundedFrameStyle("#f90600"),
                          h &&
                            (h.setColor("#f90600"),
                            h.setStrokeColor("#f90600"),
                            h.setRoundedFrameStyle("#FF9999"),
                            h.setRoundedFrameOpacity(0.1)));
                        var q = e.render();
                        I && h.setMinWidth(q.width);
                        var p;
                        k && (p = h.render());
                        v.globalAlpha = n;
                        p &&
                          v.drawImage(
                            p,
                            0.5 * canvas.width - p.width / 2,
                            m - 5
                          );
                        v.drawImage(q, 0.5 * canvas.width - q.width / 2, m);
                        v.globalAlpha = 1;
                      }
                      x &&
                        ((u = t.createElement("canvas")),
                        (n = u.getContext("2d")),
                        this.renderLeaderboard(n, u),
                        (x = !1));
                      u && !ha && K && this.drawLeaderboard(v);
                      J += (D - J) / 10;
                      0.03 > J && !B && 0 < F
                        ? ((F -= 0.05), 0 > F && ((F = 0), (H = null)))
                        : B && ((F += 0.05), 0.8 < F && (F = 0.8));
                      0 < F && !ha && this.drawCapacity(v);
                      W += (T - W) / 10;
                      !V && 0 < Y
                        ? ((Y -= 0.05), 0 > Y && ((Y = 0), (ia = null)))
                        : V && ((Y += 0.05), 0.8 < Y && (Y = 0.8));
                      0 < Y && !ha && this.drawPowerup(v);
                      O &&
                        !ha &&
                        ((0 < pa && qa) || !qa || 0 < X) &&
                        (null == ja &&
                          ((n = parseInt(20 * s) + 1),
                          (P = new ga(n, Da, !1, Da)),
                          P.setValue(O),
                          P.setUsingRoundedFrame(!0),
                          P.setRoundedFrameStyle(y),
                          P.setShadowBlur(7),
                          (ja = P.render())),
                        v.drawImage(
                          ja,
                          Q / 2 - ja.width / 2,
                          1.1 * ja.height * (na ? 1 - X / 300 : X / 300) -
                            ja.height
                        ));
                      b != s && ((c = null), (b = s));
                      a &&
                        !S &&
                        ((m = 0.3 * canvas.height),
                        (n = (l / 1e3) * 10),
                        1 < n && (n = 1),
                        c ||
                          ((c = new ga(25 * s, "#FF0000", !1, "#FF0000")),
                          c.setValue(a),
                          c.setHMargin(10),
                          c.setVMargin(10),
                          c.setUsingRoundedFrame(!1),
                          c.setShadowBlur(6),
                          (r = c.render()),
                          (z = new ga(15 * s, "#FF0000", !1, "#FF0000")),
                          z.setValue(warningSecondMessage),
                          z.setHMargin(10),
                          z.setVMargin(10),
                          z.setUsingRoundedFrame(!1),
                          z.setShadowBlur(6),
                          (G = z.render())),
                        v.save(),
                        v.translate(0.5 * canvas.width - r.width / 2, m),
                        (p = 0.2 * s),
                        (I = Math.sin(l / 100) * p),
                        (v.globalAlpha = n - p + I),
                        v.drawImage(r, 0, 0),
                        v.drawImage(
                          G,
                          r.width / 2 - G.width / 2,
                          0.8 * r.height
                        ),
                        v.restore());
                    };
                    this.update = function (a) {
                      l += a;
                      0 < X ? ((X -= a), 0 >= X && !na && (O = null)) : (X = 0);
                      qa && (pa -= a);
                      qa && 0 >= X && na && 0 >= pa && ((na = !1), (X = 300));
                      ra -= a;
                      0 > ra && (ra += 1e3);
                      0 < Ea && (Ea -= a);
                      0 < A && (A -= a);
                    };
                    this.renderLeaderboard = function (a, c) {
                      function b(c) {
                        p += h + e;
                        c = a.measureText(ka(c)).width;
                        k < c && (k = c);
                      }
                      n = 230;
                      p = 0;
                      var l = 5 * s,
                        e = 10 * s,
                        d = 23 * s,
                        h = 18 * s,
                        O,
                        r = 0 * s,
                        f = 5 * s;
                      p += l + d + l + 12;
                      O = 6 + l + d + l;
                      for (var g = v.length, k = 0, x = !1, P = 0; P < g; P++) {
                        var z = v[P];
                        z &&
                          (N != z.id || x || (x = !0),
                          b(z.nick.substring(0, 16)));
                      }
                      !x && w && b(w.nick);
                      k > r && (n += k - r);
                      m = n * s;
                      c.width = m;
                      c.height = p;
                      a.fillStyle = "rgba(0,255,255,0.1)";
                      da(a, 6, 6, m - 12, p - 12, 15 * s);
                      a.shadowColor = "rgba(0,100,100,1.0)";
                      a.shadowBlur = 6;
                      a.fillStyle = "rgba(0,100,100,1.0)";
                      xb(a, 6, 6, m - 12, 32 * s, 15 * s);
                      a.font =
                        d + "px 'proxima-nova-1','proxima-nova-2', Arial Black";
                      a.textBaseline = "middle";
                      r = a.measureText("LEADERBOARD").width;
                      a.fillStyle = "rgba(0,255,255,0.7)";
                      a.shadowColor = "rgba(0,255,255,0.7)";
                      a.shadowBlur = 2;
                      a.fillText("LEADERBOARD", m / 2 - r / 2, l + 6 + d / 2);
                      d =
                        h + "px 'proxima-nova-1','proxima-nova-2', Arial Black";
                      a.font = d;
                      O += f;
                      for (P = 0; P < g; P++)
                        if ((z = v[P])) {
                          var f = 0 == P && 0 < la,
                            G,
                            u = P + 1 + ". ";
                          f && ((G = a.measureText(u).width), (u += "    "));
                          var u = u + ka(z.nick),
                            I = 0;
                          a.fillStyle =
                            N == z.id
                              ? "rgba(0,255,255,1.0)"
                              : "rgba(0,255,255,0.4)";
                          a.font = d;
                          r = a.measureText(u).width;
                          a.fillText(u, 6 + l, O + I + h / 2);
                          r = a.measureText(z.score).width;
                          a.fillText(z.score, m - l - r - 6, O + I + h / 2);
                          f &&
                            (a.save(),
                            a.translate(6 + l + G + 10, O + I + h / 2 - 1),
                            a.scale(0.8, 0.8),
                            q.frames.crown.draw(a),
                            a.restore());
                          O += h + e;
                        }
                      !x &&
                        w &&
                        ((a.fillStyle = "rgba(0,255,255,1.0)"),
                        (u = fa + ". " + ka(w.nick)),
                        (r = a.measureText(u).width),
                        a.fillText(u, 6 + l, O + I + h / 2),
                        (r = a.measureText(ba).width),
                        a.fillText(ba, m - l - r - 6, O + I + h / 2));
                    };
                    this.drawLeaderboard = function (a) {
                      a.drawImage(u, Q - m - 5, 5);
                    };
                    this.preRenderPowerupBar = function (a, c) {
                      ca = t.createElement("canvas");
                      var b = ca.getContext("2d"),
                        l = 0.18 * Q;
                      ca.width = l + 20;
                      ca.height = 40;
                      b.fillStyle = c;
                      b.shadowColor = c;
                      b.shadowBlur = 15;
                      da(b, 10, 10, l, 20, 20);
                      b.shadowBlur = 0;
                      b.fillStyle = a;
                      da(b, 12.5, 12.5, l - 5, 15, 20);
                    };
                    this.drawPowerup = function (a) {
                      a.globalAlpha = Y;
                      var c = "hsl(" + Z + ", 100%, 55%)",
                        b = "hsl(" + Z + ", 100%, 20%)";
                      null == ca && this.preRenderPowerupBar(b, c);
                      var l = 0.5 * Q - ca.width / 2,
                        e = 0.1 * $ - ca.height / 2;
                      "RED FLAIL" != ea && (ia = null);
                      ea = "RED FLAIL";
                      ia ||
                        ((ia = new ga(17 * s, c, !1, b)),
                        ia.setValue("RED FLAIL"),
                        ia.setStrokeWidth(5),
                        ia.setUsingRoundedFrame(!1),
                        (aa = ia.render()));
                      a.globalAlpha = Y;
                      a.drawImage(
                        aa,
                        l + ca.width / 2 - aa.width / 2,
                        e - 17 - 3
                      );
                      a.drawImage(ca, l, e);
                      a.fillStyle = c;
                      da(
                        a,
                        l + 1.5 + 10,
                        e + 1.5 + 10,
                        0.18 * Q * W - 3,
                        17,
                        6
                      );
                      a.globalAlpha = 1;
                    };
                    this.preRenderCapacityBar = function (a, c) {
                      C = t.createElement("canvas");
                      var b = C.getContext("2d"),
                        l = 0.18 * Q;
                      C.width = l + 20;
                      C.height = 35;
                      b.fillStyle = c;
                      b.shadowColor = c;
                      b.shadowBlur = 10;
                      da(b, 10, 10, l, 15, 10);
                      b.shadowBlur = 0;
                      b.fillStyle = a;
                      da(b, 12.5, 12.5, l - 5, 10, 10);
                    };
                    this.drawCapacity = function (a) {
                      a.globalAlpha = F;
                      var c = "hsl(" + E + ", 100%, 70%)",
                        b = "hsl(" + E + ", 100%, 10%)";
                      null == C && this.preRenderCapacityBar(b, c);
                      var l = 0.5 * Q - C.width / 2,
                        e = 0.9 * $ - C.height / 2,
                        h = 15,
                        d = "CAPACITY";
                      1 == D
                        ? ((h = 20), (d = "FULL CAPACITY"), (M += 0.1))
                        : w && w.charging && (d = "CHARGING");
                      if ((1 > L && 1 == D) || (1 == L && 1 > D))
                        (H = null), (M = 0);
                      J > D &&
                        (w && w.attached && (d = "TRANSFERRING..."),
                        (h = 16),
                        (H = null),
                        (M = 0));
                      d != U && (H = null);
                      U = d;
                      L = D;
                      H ||
                        ((H = new ga(h * s, c, !1, b)),
                        H.setValue(d),
                        H.setStrokeWidth(5),
                        H.setUsingRoundedFrame(!1),
                        (R = H.render()));
                      a.globalAlpha = (Math.cos(M) + 1) / 2;
                      a.drawImage(R, l + C.width / 2 - R.width / 2, e - h - 3);
                      a.globalAlpha = 1;
                      a.drawImage(C, l, e);
                      a.fillStyle = c;
                      da(
                        a,
                        l + 1.5 + 10,
                        e + 1.5 + 10,
                        0.18 * Q * J - 3,
                        12,
                        6
                      );
                      a.globalAlpha = 1;
                    };
                    this.addMessage = function (a, c, b) {
                      f = a;
                      e = null;
                      k = b;
                      g = +new Date();
                      d = c;
                    };
                    this.showTargetLockedMessage = function () {
                      I || (I = "[ LOCKED ]");
                    };
                    this.clearTargetLockedMessage = function () {
                      I = null;
                    };
                    this.showWarningMessage = function (c, b) {
                      a = c;
                      warningSecondMessage = b;
                      l = 0;
                    };
                    this.clearWarningMessage = function () {
                      c = a = null;
                    };
                    this.setLastWinner = function (a, c) {
                      ka(a);
                      c && (Ea = 6e3);
                    };
                    this.refreshLeaderboard = function (a) {
                      v = a;
                      x = !0;
                    };
                    this.showPowerupBar = function (a) {
                      Z = 0;
                      ca = null;
                      T = W = a / 255;
                    };
                    this.setPowerupProgress = function (a) {
                      0 < a && (V = !0);
                      T = a / 255;
                      0.02 > T && (T = 0.02);
                    };
                    this.hidePowerupBar = function () {
                      V = !1;
                    };
                    this.showCapacity = function (a) {
                      a = 180;
                      -1 != a && (C = null);
                      E = a;
                    };
                    this.setCapacity = function (a) {
                      0 < a && (B = !0);
                      D = a / 255;
                      0.02 > D && (D = 0.02);
                    };
                    this.hideCapacity = function () {
                      B = !1;
                      D = 0.02;
                    };
                    this.showTip = function (a, c, b, l) {
                      O && this.clearTip();
                      O = a;
                      pa = c;
                      qa = 0 < c;
                      ja = null;
                      X = 300;
                      na = !0;
                      b
                        ? ((Da = b), (y = l))
                        : ((Da = "#00FFFF"), (y = "#006666"));
                    };
                    this.clearTip = function () {
                      na = !1;
                      X = 300;
                    };
                    this.updateRank = function (a, c) {
                      fa = a;
                      ba = c;
                    };
                  },
                  Ib = function () {
                    function b(a, c, b, l, e, d, h, r) {
                      var v = (Math.PI / 2) * 3,
                        g = a,
                        k = c,
                        x = Math.PI / b;
                      d.strokeStyle = h;
                      d.fillStyle = r;
                      f.redFlailDeployed && (d.fillStyle = q.bgGridRed);
                      d.beginPath();
                      d.moveTo(a, c - l);
                      for (i = 0; i < b; i++)
                        (g = a + Math.cos(v) * l),
                          (k = c + Math.sin(v) * l),
                          d.lineTo(g, k),
                          (v += x),
                          (g = a + Math.cos(v) * e),
                          (k = c + Math.sin(v) * e),
                          d.lineTo(g, k),
                          (v += x);
                      d.lineTo(a, c - l);
                      d.closePath();
                      d.lineWidth = f.redFlailDeployed ? 6 : 2;
                      f.redFlailDeployed && d.scale(0.7, 0.7);
                      d.fill();
                      d.stroke();
                      0 < f.flashFlailValue &&
                        ((d.fillStyle = "#FFFFFF"),
                        (d.strokeStyle = "#FFFFFF"),
                        (d.globalAlpha = f.flashFlailValue / 200),
                        d.fill(),
                        d.stroke());
                    }
                    var f = this;
                    this.killReason = 0;
                    this.id = -1;
                    this.dstAngle =
                      this.origAngle =
                      this.angle =
                      this.energy =
                      this.transferEnergy =
                      this.dstY =
                      this.dstX =
                      this.origY =
                      this.origX =
                      this.prevY =
                      this.prevX =
                      this.y =
                      this.x =
                        0;
                    this.chainSegments = [];
                    this.hue =
                      this.flailDstRadius =
                      this.flailRadius =
                      this.flailDstAngle =
                      this.flailOrigAngle =
                      this.flailAngle =
                      this.flailDstY =
                      this.flailDstX =
                      this.flailOrigY =
                      this.flailOrigX =
                      this.flailPrevY =
                      this.flailPrevX =
                      this.flailY =
                      this.flailX =
                        0;
                    this.attached = !0;
                    this.charging =
                      this.inside =
                      this.still =
                      this.decay =
                      this.shock =
                      this.invulnerable =
                      this.attracting =
                        !1;
                    this.flashFlailValue = 0;
                    this.nick = "";
                    this.lastUpdateTime;
                    this.highlightSin = this.highlightTime = 0;
                    var k = !0,
                      g,
                      d,
                      e,
                      h,
                      a,
                      l,
                      c,
                      r,
                      z,
                      G,
                      I;
                    this.beingDeleted = !1;
                    this.shipScale = 1;
                    this.killedByID = 0;
                    var x = 1,
                      v = 1,
                      u = 0,
                      n = !1,
                      m = 0,
                      p = (this.locatorValue = 0);
                    this.dangerLowFreq =
                      this.redFlailDeployed =
                      this.redFlail =
                        !1;
                    this.holoIn = this.holoAngle = this.lowFreqFrame = 0;
                    this.update = function (a) {
                      if (this.beingDeleted)
                        3 != this.killReason &&
                          ((this.flailX +=
                            (0.4 * (this.flailDstX - this.flailOrigX)) / 3),
                          (this.flailY +=
                            (0.4 * (this.flailDstY - this.flailOrigY)) / 3));
                      else {
                        var c = T((D - this.lastUpdateTime) / W, 0, 1);
                        this.prevX = this.x;
                        this.prevY = this.y;
                        var b = c * (this.dstX - this.origX) + this.origX,
                          l = c * (this.dstY - this.origY) + this.origY;
                        this.x = b;
                        this.y = l;
                        this.angle =
                          c * (this.dstAngle - this.origAngle) + this.origAngle;
                        this.flailRadius +=
                          (this.flailDstRadius - this.flailRadius) / 20;
                        for (
                          var e = this.chainSegments.length, d = 0;
                          d < e;
                          d++
                        ) {
                          var h = this.chainSegments[d];
                          h.prevX = h.x;
                          h.prevY = h.y;
                          b = c * (h.dstX - h.origX) + h.origX;
                          l = c * (h.dstY - h.origY) + h.origY;
                          h.x = b;
                          h.y = l;
                        }
                        this.flailPrevX = this.flailX;
                        this.flailPrevY = this.flailY;
                        b =
                          c * (this.flailDstX - this.flailOrigX) +
                          this.flailOrigX;
                        l =
                          c * (this.flailDstY - this.flailOrigY) +
                          this.flailOrigY;
                        this.flailX = b;
                        this.flailY = l;
                        this.flailAngle =
                          c * (this.flailDstAngle - this.flailOrigAngle) +
                          this.flailOrigAngle;
                      }
                      this.highlightSin +=
                        0.1 + (this.transferEnergy / 255) * 0.5;
                      this.highlightTime -= a;
                      0 > this.highlightTime && (this.highlightTime = 0);
                      this.beingDeleted &&
                        ((this.shipScale -= 0.1),
                        0 > this.shipScale &&
                          (this.id == N &&
                            ((N = 0),
                            (w = null),
                            B.hideCapacity(),
                            B.hidePowerupBar(),
                            B.clearWarningMessage()),
                          delete A[this.id]));
                      this.invulnerable
                        ? ((u -= a),
                          0 >= u && ((u = 250), (x = (n = !n) ? 1 : 0.4)))
                        : ((v = this.redFlailDeployed
                            ? this.dangerLowFreq
                              ? 0.6
                              : 1
                            : 1),
                          (x = 1));
                      this.shock &&
                        (this.id != N || this.redFlailDeployed || y.shake(),
                        (this.shock = !1),
                        (m = 200));
                      0 < m && (m -= a);
                      0 < this.locatorValue && (this.locatorValue -= a);
                      p += 0.2;
                      p > 2 * Math.PI && (p = 0);
                      Ha() &&
                        4 == E.getTutorialState() &&
                        ((c = this.flailX - this.x),
                        (b = this.flailY - this.y),
                        350 < Math.sqrt(c * c + b * b) &&
                          E.setTutorialState(5));
                      this.redFlailDeployed &&
                        (this.lowFreqFrame++,
                        2 < this.lowFreqFrame &&
                          ((this.dangerLowFreq = !this.dangerLowFreq),
                          (this.lowFreqFrame = 0)));
                      this.redFlail && !this.redFlailDeployed
                        ? ((this.holoIn += (1 - this.holoIn) / 8),
                          0.99 < this.holoIn && (this.holoIn = 1))
                        : ((this.holoIn -= (a / 1e3) * 2),
                          0 > this.holoIn && (this.holoIn = 0));
                      0 < this.flashFlailValue &&
                        ((this.flashFlailValue -= a),
                        0 >= this.flashFlailValue &&
                          (this.flashFlailValue = 0));
                    };
                    this.drawCar = function (b, e) {
                      0 == e
                        ? (q.frames.car_l1_min.draw(b), r.draw(b), z.draw(b))
                        : (a.draw(b), l.draw(b), c.draw(b));
                      this.beingDeleted &&
                        (b.scale(1.4, 1.4), q.frames.car_shock.draw(b));
                      0 < m &&
                        (b.scale(1.8, 1.8),
                        q.frames.car_shock.draw(b),
                        q.whiteCarGlow.draw(b));
                    };
                    this.drawAfter = function (a) {
                      var c = d,
                        l = e,
                        r = h;
                      0 < m && (r = l = c = "hsl(0, 0%, 100%)");
                      a.save();
                      a.translate(this.x, this.y);
                      a.rotate(-this.angle);
                      a.globalAlpha = this.shipScale * x;
                      if (this.attached) this.drawCar(a, 0);
                      else {
                        this.drawCar(a, 1);
                        var f = this.transferEnergy / 255,
                          g = this.highlightTime / 250;
                        f < g && (f = g);
                        1 < f && (f = 1);
                        g = (Math.sin(this.highlightSin) + 1) / 2;
                        a.globalAlpha = f * g * this.shipScale * x;
                        255 == this.transferEnergy && G.draw(a);
                        this.drawCar(a, 0);
                        a.globalAlpha = 1 * this.shipScale * x;
                      }
                      a.restore();
                      0 < this.holoIn &&
                        ((this.holoAngle += 0.01),
                        (a.globalAlpha = 0.3),
                        gb(
                          a,
                          this.x,
                          this.y,
                          this.holoAngle,
                          0,
                          1 * this.holoIn
                        ),
                        (a.globalAlpha = 1));
                      a.save();
                      a.globalAlpha = this.shipScale * x;
                      var z = this.chainSegments.length;
                      a.beginPath();
                      f = this.x + 20 * Math.sin(this.angle);
                      g = this.y + 20 * Math.cos(this.angle);
                      a.moveTo(f, g);
                      for (var u, n, q, s = 0; s < z; s++)
                        (u = this.chainSegments[s]),
                          (n = u.x),
                          (q = u.y),
                          s + 1 < z &&
                            ((n = this.chainSegments[s + 1].x),
                            (q = this.chainSegments[s + 1].y)),
                          s % 2 && a.bezierCurveTo(f, g, u.x, u.y, n, q),
                          (f = u.x),
                          (g = u.y);
                      !this.attached ||
                        this.beingDeleted ||
                        this.redFlail ||
                        a.lineTo(this.flailX, this.flailY);
                      a.lineWidth = 2;
                      a.strokeStyle = this.attached ? r : c;
                      this.redFlail && (a.strokeStyle = "#FF0000");
                      a.stroke();
                      a.restore();
                      this.redFlailDeployed &&
                        ((q = f - this.flailX),
                        (z = g - this.flailY),
                        (n = Math.sqrt(q * q + z * z)),
                        (q = (q / n) * 5),
                        (z = (z / n) * 5),
                        a.beginPath(),
                        (a.fillStyle = "#FF0000"),
                        a.arc(f - q, g - z, 4, 0, 2 * Math.PI),
                        a.fill());
                      !this.attached &&
                        this.attracting &&
                        ((k = !k),
                        a.save(),
                        a.beginPath(),
                        (a.fillStyle = r),
                        (a.strokeStyle = r),
                        this.redFlail &&
                          ((a.fillStyle = "#FF0000"),
                          (a.strokeStyle = "#FF0000")),
                        (f = 0.5),
                        k && (f = 1),
                        a.arc(u.x, u.y, 10 * f, 0, 2 * Math.PI),
                        a.closePath(),
                        a.fill(),
                        k &&
                          ((a.globalAlpha = 0.5 * this.shipScale * x),
                          (a.lineWidth = 3),
                          a.beginPath(),
                          a.arc(u.x, u.y, 15, 0, 2 * Math.PI),
                          a.closePath(),
                          a.stroke(),
                          (a.globalAlpha = 0.5 * this.shipScale * x),
                          (a.lineWidth = 2),
                          a.beginPath(),
                          a.arc(u.x, u.y, 20, 0, 2 * Math.PI),
                          a.closePath(),
                          a.stroke()),
                        a.restore());
                      u = this.flailRadius;
                      var t;
                      if (this.decay || this.still)
                        (t = Math.sin(p)),
                          (t = 0.7 < t ? t - 0.7 : 0),
                          (u *= 1 - 0.1 * t);
                      a.save();
                      a.globalAlpha = this.shipScale * x;
                      a.translate(this.flailX, this.flailY);
                      a.rotate(this.flailAngle);
                      f = ((u / 215) * 8 + 2) * this.shipScale;
                      R &&
                        (a.scale(f, f),
                        (g = 0.2),
                        this.redFlailDeployed && (g = 0.3),
                        (a.globalAlpha = g * this.shipScale * x),
                        I.draw(a),
                        (a.globalAlpha = 1 * this.shipScale * x * v),
                        a.scale(1 / f, 1 / f));
                      f = 10 + ((this.flailRadius - 15) / 135) * 25;
                      g = f / 4;
                      30 < g && (g = 30);
                      z = 0;
                      0 < m && (z = (m / 200) * 20);
                      b(
                        0,
                        0,
                        f,
                        u * this.shipScale + z,
                        (u - 4 - g) * this.shipScale,
                        a,
                        l,
                        r
                      );
                      if (this.decay || this.still)
                        (a.globalAlpha = (1 / 0.3) * t * 0.5),
                          b(
                            0,
                            0,
                            f,
                            u * this.shipScale + z,
                            (u - 4 - g) * this.shipScale,
                            a,
                            l,
                            "#FF0000"
                          );
                      a.restore();
                      this.redFlailDeployed ||
                        (a.save(),
                        (a.globalAlpha = this.shipScale * x),
                        a.beginPath(),
                        (f = u - 6 - g),
                        0 > f && (f = 0.1),
                        a.arc(
                          this.flailX,
                          this.flailY,
                          f * this.shipScale,
                          0,
                          2 * Math.PI,
                          !1
                        ),
                        (a.fillStyle = c),
                        a.fill(),
                        a.restore());
                      this.attached ||
                        N != this.id ||
                        ((c = this.locatorValue / 1e3),
                        0 > c && (c = 0),
                        (l = u + 30 + 40 * c),
                        a.beginPath(),
                        (a.globalAlpha = 0.2 * (1 - c)),
                        (a.lineWidth = 4),
                        (a.strokeStyle = "#FFFFFF"),
                        a.moveTo(this.flailX - l, this.flailY + l),
                        a.lineTo(this.flailX + l, this.flailY + l),
                        a.lineTo(this.flailX + l, this.flailY - l),
                        a.lineTo(this.flailX - l, this.flailY - l),
                        a.closePath(),
                        (a.lineCap = "round"),
                        (c = 2 * l),
                        a.setLineDash([
                          0.15 * c,
                          0.7 * c,
                          0.3 * c,
                          0.7 * c,
                          0.3 * c,
                          0.7 * c,
                          0.3 * c,
                          0.7 * c,
                          0.3 * c,
                        ]),
                        a.stroke(),
                        (a.globalAlpha = 1),
                        (a.lineCap = "butt"),
                        (a.lineWidth = 1),
                        a.setLineDash([]));
                    };
                    this.draw = function (a) {};
                    this.drawFlailIcon = function (a) {
                      a.save();
                      if (this.decay) {
                        var c = 1 + 0.1 * Math.sin(p);
                        a.scale(c, c);
                      }
                      c = 0;
                      0 < m
                        ? ((c = (m / 200) * 5),
                          b(0, 0, 10, 10, 13 + c, a, "#FFFFFF", "#FFFFFF"))
                        : (b(0, 0, 10, 10, 13, a, e, h),
                          a.beginPath(),
                          (a.fillStyle = d),
                          a.arc(0, 0, 9, 0, 2 * Math.PI),
                          a.closePath(),
                          a.fill());
                      a.restore();
                    };
                    this.drawInput = function (a) {
                      a.lineWidth = 1;
                      a.beginPath();
                      a.strokeStyle = "rgba(255,255,255,0.2)";
                      a.arc(this.x, this.y, 75 / ea, 0, 2 * Math.PI);
                      a.closePath();
                      a.stroke();
                      var c = -L.angle + Math.PI,
                        b = !L.hover;
                      0.01 >= b && (b = 0.3);
                      a.save();
                      a.translate(this.x, this.y);
                      a.rotate(c);
                      a.translate(0, -28 - 10 * b);
                      c = 0.9;
                      this.attached && (c = 1.1);
                      1 == L.throttle && (c += 0.2);
                      a.fillStyle = "rgba(255,255,255,0.2)";
                      a.beginPath();
                      a.moveTo(-8 * b * c, 0);
                      a.lineTo(8 * b * c, 0);
                      a.lineTo(0, -20 * b * c);
                      a.fill();
                      a.restore();
                    };
                    this.drawInfo = function (a) {
                      a.save();
                      a.translate(this.x, this.y);
                      this.id == la &&
                        (a.translate(0, -60),
                        q.frames.crown.draw(a),
                        a.translate(0, 60));
                      a.fillStyle = "rgba(255,255,255,1)";
                      a.globalAlpha = 0.85;
                      a.fillStyle = "rgba(0,255,255,0.5)";
                      a.font =
                        "Bold 15px 'proxima-nova-1','proxima-nova-2', arial, sans-serif";
                      a.textBaseline = "hanging";
                      var c = a.measureText(f.nick).width;
                      a.fillText(f.nick, -c / 2, 38);
                      a.restore();
                    };
                    this.GetRedGlowInfo = function () {
                      var a = {};
                      a.x = this.flailX;
                      a.y = this.flailY;
                      a.scale = (this.flailRadius / 215) * 8 + 2;
                      return a;
                    };
                    this.updateChainFlail = function (a, c, b) {
                      var l;
                      l = a.getUint8(c);
                      c += 1;
                      for (var e = 0; e < l; e++) {
                        b &&
                          this.chainSegments.push({
                            x: 0,
                            y: 0,
                            prevX: 0,
                            prevY: 0,
                            dstX: 0,
                            dstY: 0,
                            origX: 0,
                            origY: 0,
                          });
                        var d = a.getFloat32(c, !0);
                        c += 4;
                        var h = -a.getFloat32(c, !0);
                        c += 4;
                        var r = this.chainSegments[e];
                        r.origX = r.x;
                        r.origY = r.y;
                        r.dstX = 10 * d;
                        r.dstY = 10 * h;
                        b &&
                          ((r.origX = r.dstX),
                          (r.origY = r.dstY),
                          (r.x = r.dstX),
                          (r.y = r.dstY));
                      }
                      return c;
                    };
                    this.updateNetworkFlail = function (a, c, b, l) {
                      var e, d, h, r;
                      e = a.getFloat32(c, !0);
                      c += 4;
                      d = -a.getFloat32(c, !0);
                      c += 4;
                      h = -a.getFloat32(c, !0);
                      c += 4;
                      var f = this.id == N;
                      r = a.getUint32(c, !0);
                      c += 4;
                      this.energy = r;
                      var v = r / 5e3;
                      1 < v && (v = 1);
                      v = 1 / (1.7 + 0.3 * Math.pow(v, 1 / 3));
                      r = 4 * Math.pow(r / 100, v) - 3;
                      var g;
                      179 == l
                        ? ((g = a.getUint8(c, !0)), (c += 1))
                        : ((g = a.getUint16(c, !0)), (c += 2));
                      v = this.attached;
                      this.attached = g & 1;
                      N == this.id &&
                        (v && !this.attached
                          ? ((this.locatorValue = 1e3),
                            B.showCapacity(this.hue),
                            E.setTutorialState(3))
                          : !v &&
                            this.attached &&
                            (B.hideCapacity(),
                            (v = E.getTutorialState()),
                            4 == v
                              ? E.setTutorialState(1)
                              : 6 == v && E.setTutorialState(7)));
                      this.attracting = g & 2;
                      this.invulnerable = g & 4;
                      this.shock = g & 8;
                      v = this.decay;
                      this.decay = g & 16;
                      var k = this.still;
                      this.still = g & 32;
                      this.inside = g & 64;
                      this.charging = g & 128;
                      179 != l &&
                        ((l = this.redFlail),
                        (this.redFlail = g & 256),
                        !l && this.redFlail
                          ? this.preRenderRedCar()
                          : l && !this.redFlail && this.preRender(this.hue),
                        (l = this.redFlailDeployed),
                        (this.redFlailDeployed = g & 512),
                        (g = 0),
                        this.redFlailDeployed && ((g = a.getUint8(c, !0)), c++),
                        !l && this.redFlailDeployed
                          ? ((this.flashFlailValue = 200),
                            this.preRender(0),
                            f && B.showPowerupBar(g))
                          : l &&
                            !this.redFlailDeployed &&
                            ((this.flashFlailValue = 200),
                            f && B.hidePowerupBar()),
                        this.redFlailDeployed && f && B.setPowerupProgress(g));
                      a = !v && this.decay;
                      l = !k && this.still;
                      if (f) {
                        if (a || l)
                          a
                            ? B.showWarningMessage(
                                "LOSING ENERGY!",
                                "GET CLOSER TO BALL"
                              )
                            : B.showWarningMessage("LOSING ENERGY!", "MOVE!");
                        ((v && !this.decay) || (k && !this.still)) &&
                          B.clearWarningMessage();
                      }
                      if (a || l) p = 0;
                      this.flailOrigX = this.flailX;
                      this.flailOrigY = this.flailY;
                      this.flailOrigAngle = this.flailAngle;
                      this.flailDstX = 10 * e;
                      this.flailDstY = 10 * d;
                      this.flailDstAngle = h;
                      this.flailDstRadius = 10 * r;
                      if (w == this || aa == this.id)
                        (e = 1.2),
                          (e = (r - 1.5) / 20),
                          1 < e && (e = 1),
                          (e = 1 - 0.3 * e),
                          this.inside && (e = 0.8),
                          0.8 > e && (e = 0.8),
                          (xa = e);
                      b &&
                        ((this.flailOrigX = this.flailDstX),
                        (this.flailOrigY = this.flailDstY),
                        (this.flailX = this.flailDstX),
                        (this.flailY = this.flailDstY),
                        (this.flailOrigAngle = this.flailDstAngle),
                        (this.flailRadius = this.flailDstRadius));
                      return c;
                    };
                    this.updateNetwork = function (a, c, b, l) {
                      var e, d, h;
                      e = a.getUint8(c, !0);
                      c += 1;
                      e > this.transferEnergy && (this.highlightTime = 250);
                      e != this.transferEnergy &&
                        this.id == N &&
                        B.setCapacity(e);
                      this.transferEnergy = e;
                      e = a.getFloat32(c, !0);
                      c += 4;
                      d = -a.getFloat32(c, !0);
                      c += 4;
                      h = a.getFloat32(c, !0);
                      this.origX = this.x;
                      this.origY = this.y;
                      this.origAngle = this.angle;
                      this.dstX = 10 * e;
                      this.dstY = 10 * d;
                      this.dstAngle = h;
                      c = this.updateChainFlail(a, c + 4, b, l);
                      c = this.updateNetworkFlail(a, c, b, l);
                      b &&
                        ((this.origX = this.dstX),
                        (this.origY = this.dstY),
                        (this.x = this.dstX),
                        (this.y = this.dstY),
                        (this.origAngle = this.dstAngle),
                        (this.hue = a.getUint16(c, !0)),
                        (c += 2),
                        this.preRender(this.hue),
                        this.redFlail && !this.redFlailDeployed
                          ? this.preRenderRedCar()
                          : this.redFlail &&
                            this.redFlailDeployed &&
                            this.preRender(0));
                      this.lastUpdateTime = D;
                      return c;
                    };
                    this.deleteNetwork = function (a, c) {
                      this.id == N &&
                        ((aa = this.killedByID), (cameraSmooth = 30));
                      U && 0 != this.killReason
                        ? ((this.beingDeleted = !0),
                          this.id == N &&
                            (3 == this.killReason
                              ? (B.addMessage("ELECTROCUTED"),
                                y.shake(),
                                (this.shock = !0))
                              : 2 == this.killReason
                              ? (B.addMessage("DELETED BY SENTINEL"), y.shake())
                              : 5 == this.killReason && (y.shake(), (ha = !0))))
                        : (this.id == N &&
                            ((N = 0),
                            (w = null),
                            B.hideCapacity(),
                            B.hidePowerupBar(),
                            B.clearWarningMessage()),
                          delete A[this.id]);
                      return c;
                    };
                    this.preRender = function (b) {
                      g = "hsl(" + b + ", 100%, 20%)";
                      d = "hsl(" + b + ", 100%, 30%)";
                      e = "hsl(" + b + ", 100%, 40%)";
                      h = "hsl(" + b + ", 100%, 50%)";
                      chainGlow = "hsl(" + b + ", 100%, 70%)";
                      b = "hsl(" + b + ", 100%, 40%)";
                      a = q.frames.car_l1_min.renderTintedFrame("#AAAAAA");
                      l = q.frames.car_l2_min.renderTintedFrame(g);
                      c = q.frames.car_l3_min.renderTintedFrame(d);
                      r = q.frames.car_l2_min.renderTintedFrame(e);
                      z = q.frames.car_l3_min_glow.renderTintedFrame(h);
                      G = q.frames.grid_mask_hard.renderTintedFrame(b);
                      I = q.frames.grid_mask_hard.renderTintedFrame(b);
                    };
                    this.preRenderRedCar = function () {
                      a = q.frames.car_l1_min.renderTintedFrame("#AAAAAA");
                      l =
                        q.frames.car_l2_min.renderTintedFrame(
                          "hsl(0, 100%, 20%)"
                        );
                      c =
                        q.frames.car_l3_min.renderTintedFrame(
                          "hsl(0, 100%, 30%)"
                        );
                      r =
                        q.frames.car_l2_min.renderTintedFrame(
                          "hsl(0, 100%, 40%)"
                        );
                      z =
                        q.frames.car_l3_min_glow.renderTintedFrame(
                          "hsl(0, 100%, 50%)"
                        );
                      G =
                        q.frames.grid_mask_hard.renderTintedFrame(
                          "hsl(0, 100%, 40%)"
                        );
                      I = q.frames.grid_mask_hard.renderTintedFrame(
                        "hsl(" + this.hue + ", 100%, 40%)"
                      );
                    };
                    this.resume = function () {};
                    this.cleanup = function () {};
                    this.setKilledBy = function (a) {
                      this.killedByID = a;
                    };
                  },
                  Jb = function () {
                    this.id = -1;
                    this.dstY =
                      this.dstX =
                      this.origY =
                      this.origX =
                      this.prevY =
                      this.prevX =
                      this.y =
                      this.x =
                        0;
                    this.energy = 255;
                    this.dstAngle = this.origAngle = this.angle = 0;
                    this.nick = "";
                    this.hue = 0;
                    this.lastUpdateTime;
                    var b = (this.killedByID = 0),
                      f,
                      k,
                      g = 0;
                    this.canInterpolate = this.beingDeleted = !1;
                    this.beginGraby = this.beginGrabX = this.blendIn = 0;
                    this.flailGrabbed = !1;
                    var d = 0;
                    this.update = function (b) {
                      b *= 0.06;
                      if (this.beingDeleted) {
                        var h = A[this.killedByID];
                        if (h) {
                          var a = Math.pow(g, 2),
                            l;
                          this.flailGrabbed
                            ? ((l = h.flailX), (h = h.flailY))
                            : ((l = h.x), (h = h.y));
                          this.x = this.beginGrabX + (l - this.beginGrabX) * a;
                          this.y = this.beginGrabY + (h - this.beginGrabY) * a;
                        }
                        g += 0.07 * b;
                        1 < g && delete A[this.id];
                      } else
                        (b = T((D - this.lastUpdateTime) / W, 0, 1)),
                          (this.prevX = this.x),
                          (this.prevY = this.y),
                          (a = b * (this.dstY - this.origY) + this.origY),
                          (this.x = b * (this.dstX - this.origX) + this.origX),
                          (this.y = a),
                          (this.angle =
                            b * (this.dstAngle - this.origAngle) +
                            this.origAngle);
                      this.beingDeleted && (d += 0.2);
                    };
                    this.drawAfter = function (b) {};
                    this.draw = function (e) {
                      if (this.canInterpolate) {
                        e.save();
                        e.translate(this.x, this.y);
                        e.rotate(-this.angle);
                        b += 0.05;
                        var h = 0.3 - 0.05 * Math.sin(b),
                          a = 0.3 + 0.05 * Math.sin(b);
                        e.scale(h, a);
                        this.beingDeleted &&
                          (e.rotate(d),
                          0 < this.killedByID
                            ? e.scale(1.7, 1.7)
                            : e.scale(1 - g, 1 - g));
                        k.draw(e);
                        e.restore();
                      }
                    };
                    this.drawInput = function (b) {};
                    this.drawInfo = function (b) {};
                    this.updateNetwork = function (b, d, a) {
                      var l, c, r;
                      b.getUint16(d, !0);
                      d += 2;
                      l = b.getFloat32(d, !0);
                      d += 4;
                      c = -b.getFloat32(d, !0);
                      d += 4;
                      r = b.getFloat32(d, !0);
                      d += 4;
                      this.origX = this.x;
                      this.origY = this.y;
                      this.origAngle = this.angle;
                      this.dstX = 10 * l;
                      this.dstY = 10 * c;
                      this.dstAngle = r;
                      a
                        ? ((this.origX = this.dstX),
                          (this.origY = this.dstY),
                          (this.x = this.dstX),
                          (this.y = this.dstY),
                          (this.origAngle = this.dstAngle),
                          (this.hue = b.getUint16(d, !0)),
                          (d += 2),
                          (f = "hsl(" + this.hue + ", 100%, 50%)"),
                          (k = q.frames.energy.renderTintedFrame(f)))
                        : (this.canInterpolate = !0);
                      this.lastUpdateTime = D;
                      return d;
                    };
                    this.deleteNetwork = function (b, d) {
                      if (U)
                        return (
                          (this.flailGrabbed = b.getUint8(d)),
                          d++,
                          (this.beingDeleted = !0),
                          (this.beginGrabX = this.x),
                          (this.beginGrabY = this.y),
                          d
                        );
                      delete A[this.id];
                      return ++d;
                    };
                    this.resume = function () {};
                    this.cleanup = function () {};
                    this.setKilledBy = function (b) {
                      this.killedByID = b;
                    };
                  },
                  Lb = function (b) {
                    this.subType = b;
                    this.id = -1;
                    this.dstY =
                      this.dstX =
                      this.origY =
                      this.origX =
                      this.prevY =
                      this.prevX =
                      this.y =
                      this.x =
                        0;
                    this.energy = 255;
                    this.dstAngle = this.origAngle = this.angle = 0;
                    this.nick = "";
                    this.lastUpdateTime;
                    var f = (this.killedByID = 0),
                      k = 0,
                      g,
                      d,
                      e,
                      h = 0;
                    this.canInterpolate = this.beingDeleted = !1;
                    this.blendIn = 0;
                    this.flailGrabbed = !1;
                    this.impulseValue = 0;
                    this.positive = !0;
                    var a = new Kb();
                    a.fixedColor = !0;
                    this.update = function (b) {
                      var c = 0.06 * b;
                      if (this.beingDeleted)
                        (h += 0.07 * c), 1 < h && delete A[this.id];
                      else {
                        c = T((D - this.lastUpdateTime) / W, 0, 1);
                        this.prevX = this.x;
                        this.prevY = this.y;
                        var d = c * (this.dstY - this.origY) + this.origY;
                        this.x = c * (this.dstX - this.origX) + this.origX;
                        this.y = d;
                        this.angle =
                          c * (this.dstAngle - this.origAngle) + this.origAngle;
                      }
                      this.impulseValue -= b / 1e3;
                      0 > this.impulseValue && (this.impulseValue = 0);
                      a &&
                        (a.setPosition(this.x, this.y),
                        (a.enabled = !0),
                        a.update(b));
                    };
                    this.drawAfter = function (a) {};
                    this.draw = function (b) {
                      a &&
                        ((b.globalAlpha = 0.3 * (1 - h)),
                        a.draw(b),
                        (b.globalAlpha = 1));
                      b.save();
                      b.translate(this.x, this.y);
                      b.rotate(this.angle + Math.PI);
                      e &&
                        (b.scale(2.7, 2.7),
                        (b.globalAlpha = 0.4 * (1 - h)),
                        e.draw(b),
                        b.scale(1 / 2.7, 1 / 2.7));
                      f = this.impulseValue * this.impulseValue * Math.PI * 2;
                      f += Math.PI / 2;
                      var c = 0.6 + (0.1 * Math.sin(f) - 0.1),
                        r = 0.6 - 0.1 * Math.sin(f);
                      this.positive ||
                        ((k -= 0.1),
                        (c *= 1.7 + 0.1 * Math.sin(k)),
                        (r *= 1.7 + 0.1 * Math.cos(k)));
                      var g = 0;
                      this.beingDeleted &&
                        (g = 0.5 * -(Math.abs(h - 0.5) - 0.5) + 0.25);
                      b.scale(c + g, r + g);
                      b.globalAlpha = 1 - Math.pow(h, 3);
                      d.draw(b);
                      this.beingDeleted && d.draw(b);
                      b.restore();
                    };
                    this.drawInput = function (a) {};
                    this.drawInfo = function (a) {};
                    this.updateNetwork = function (l, c, r) {
                      var h, f, k;
                      l.getUint16(c, !0);
                      c += 2;
                      h = l.getFloat32(c, !0);
                      c += 4;
                      f = -l.getFloat32(c, !0);
                      c += 4;
                      k = l.getFloat32(c, !0);
                      c += 4;
                      this.origX = this.x;
                      this.origY = this.y;
                      this.origAngle = this.angle;
                      this.dstX = 10 * h;
                      this.dstY = 10 * f;
                      this.dstAngle = k;
                      l.getUint8(c) && (this.impulseValue = 1);
                      c += 1;
                      r &&
                        ((this.origX = this.dstX),
                        (this.origY = this.dstY),
                        (this.x = this.dstX),
                        (this.y = this.dstY),
                        (this.origAngle = this.dstAngle),
                        (this.positive = l.getUint8(c)),
                        (c += 1),
                        (this.hue = this.positive ? 116 : 0),
                        (g = "hsl(" + this.hue + ", 100%, 50%)"),
                        (d = q.frames.tri.renderTintedFrame(g)),
                        (a.style = g),
                        3 == b &&
                          (e = q.frames.grid_mask.renderTintedFrame(g)));
                      this.lastUpdateTime = D;
                      return c;
                    };
                    this.deleteNetwork = function (a, c) {
                      U && 0 != this.killReason
                        ? ((this.flailGrabbed = a.getUint8(c)),
                          (this.beingDeleted = !0))
                        : delete A[this.id];
                      return ++c;
                    };
                    this.resume = function () {};
                    this.cleanup = function () {};
                  },
                  Mb = function (b) {
                    this.id = -1;
                    this.y = this.x = this.shapeIndex = 0;
                    this.subType = b;
                    this.margin = 30;
                    this.hitValue = 0;
                    this.pulsing = !1;
                    this.coreRotation = this.pulseValue = 0;
                    var f,
                      k,
                      g,
                      d,
                      e = 0,
                      h = 0,
                      a = 1,
                      l = !1,
                      c = 0,
                      r = 0,
                      z = !1;
                    this.update = function (a) {
                      0 < this.hitValue &&
                        ((this.hitValue -= (a / 1e3) * 10),
                        0 > this.hitValue && (this.hitValue = 0));
                      if (this.pulsing || 0 < this.pulseValue)
                        (this.pulseValue += 0.3),
                          this.pulseValue > 2 * Math.PI &&
                            (this.pulseValue = 0),
                          (this.pulsing = !1);
                    };
                    this.render = function (a, c, b) {
                      a.save();
                      var l = F.objects[this.shapeIndex - 1];
                      1 == l.type
                        ? l.drawPath(a, !0, this.margin)
                        : c
                        ? l.drawPath(a, e, h, this.margin)
                        : l.drawPath(a, 0, 0, this.margin);
                      var d;
                      c = 5;
                      0 == this.subType
                        ? b
                          ? ((a.fillStyle = q.bgGridGreen), (d = "#00FF00"))
                          : ((a.fillStyle = "#003a08"),
                            (d = "#00BB00"),
                            (c = 2))
                        : 1 == this.subType
                        ? ((a.fillStyle = "#023139"), (d = "#0bdfff"))
                        : 2 == this.subType
                        ? ((a.fillStyle = q.bgGridRed), (d = "#FF0000"))
                        : 4 == this.subType
                        ? ((a.fillStyle =
                            1 == b
                              ? q.bgCoreCharge
                              : 0 == b
                              ? q.bgCore
                              : "#000000"),
                          (c = 4),
                          a.setLineDash([8, 11]),
                          (d = "#0bdfff"),
                          (a.lineCap = "round"))
                        : 5 == this.subType &&
                          ((a.fillStyle = "#000000"),
                          1 == b
                            ? ((d = "#ffd200"),
                              a.setLineDash([20, 20]),
                              (c = 7))
                            : 0 == b
                            ? ((d = "#00FF00"),
                              a.setLineDash([10, 10]),
                              (c = 5))
                            : ((d = "#000"), (c = 0)),
                          (a.lineCap = "round"));
                      a.strokeStyle = d;
                      a.fillStyle &&
                        (a.scale(0.4, 0.4),
                        a.rotate(Math.PI / 4),
                        a.fill(),
                        a.scale(2.5, 2.5));
                      0 < c &&
                        ((a.shadowColor = d),
                        (a.shadowBlur = this.margin),
                        (a.lineWidth = c),
                        a.stroke(),
                        2 == this.subType && a.stroke());
                      a.restore();
                    };
                    var G = 0,
                      n = 0,
                      x = 0;
                    this.drawObject = function (b) {
                      var u = F.objects[this.shapeIndex - 1];
                      if (u)
                        if (
                          (z || this.preRender(),
                          2 == this.subType && (a = (l = !l) ? 0.6 : 1),
                          f)
                        )
                          if (1 == u.type) {
                            b.save();
                            var m = 0,
                              p = 0;
                            0 == this.subType &&
                              ((p = 1 - c / 255),
                              (G += 0.05 + p / 5),
                              Math.sqrt(Math.sin(G) * Math.sin(G)),
                              (m = 0.05 * p));
                            b.translate(u.posX, u.posY);
                            b.scale(
                              1 + 0.2 * this.hitValue - Math.cos(G) * m,
                              1 + 0.2 * this.hitValue + Math.sin(G) * m
                            );
                            u =
                              1 +
                              0.2 * (1 - (Math.cos(this.pulseValue) + 1) / 2);
                            b.scale(u, u);
                            b.rotate(0.2 * this.hitValue);
                            u = f;
                            5 == this.subType &&
                              ((n += coreRotation),
                              1 == M
                                ? 0 < n && ((x += 0.05), 0.15 < x && (x = 0.15))
                                : 2 == M
                                ? (u = k)
                                : 4 == M &&
                                  (b.scale(2.9, 2.9),
                                  d.draw(b),
                                  b.scale(1 / 2.9, 1 / 2.9),
                                  (u = g)),
                              1 != M && ((x -= 0.05), 0 > x && (x = 0)),
                              b.scale(1 + x, 1 + x),
                              b.rotate(n));
                            b.translate(-f.width / 2, -f.height / 2);
                            b.globalAlpha = (1 - 0.2 * this.hitValue) * a;
                            b.drawImage(u, 0, 0);
                            0 == this.subType &&
                              ((b.globalAlpha = p),
                              this.hitValue > p &&
                                (b.globalAlpha = this.hitValue),
                              b.drawImage(k, 0, 0));
                            b.globalAlpha = 1;
                            b.restore();
                          } else
                            (b.globalAlpha = a),
                              4 == this.subType && 4 == M
                                ? b.drawImage(g, -e, -h)
                                : b.drawImage(f, -e, -h),
                              4 == this.subType
                                ? (1 == M
                                    ? ((r += 0.1),
                                      (p = Math.sin(r) / 2 + 1 - 0.5),
                                      (b.globalAlpha = Math.sqrt(p)))
                                    : (b.globalAlpha = 1),
                                  0 != M && 4 != M && b.drawImage(k, -e, -h))
                                : (r = 0),
                              (b.globalAlpha = 1);
                        else this.render(b, !1, 0);
                    };
                    this.draw = function (a) {
                      (4 == this.subType || (5 == this.subType && 4 != M)) &&
                        this.drawObject(a);
                    };
                    this.drawAfter = function (a) {
                      4 == this.subType ||
                        (5 == this.subType && 4 != M) ||
                        this.drawObject(a);
                    };
                    this.drawInput = function (a) {};
                    this.drawInfo = function (a) {};
                    this.updateNetwork = function (a, l, d) {
                      var e, r, h, f;
                      e = a.getFloat32(l, !0);
                      l += 4;
                      r = -a.getFloat32(l, !0);
                      l += 4;
                      h = a.getFloat32(l, !0);
                      l += 4;
                      f = a.getUint8(l, !0);
                      l += 1;
                      if (0 == b)
                        a.getUint8(l, !0) && (this.hitValue = 1),
                          (l += 1),
                          (c = a.getUint8(l++, !0));
                      else if (5 == b) {
                        var g = a.getUint8(l++, !0);
                        M = g & -9;
                        g & 8 && (this.pulsing = !0);
                        coreRotation = a.getFloat32(l, !0);
                        l += 4;
                      }
                      this.x = e;
                      this.y = r;
                      this.angle = h;
                      this.shapeIndex = f;
                      d && this.preRender();
                      return l;
                    };
                    this.preRender = function () {
                      var a = F.objects[this.shapeIndex - 1];
                      if (a) {
                        f = t.createElement("canvas");
                        var c = f.getContext("2d");
                        if (2 == a.type) {
                          for (
                            var b = a.vertexes.length, l, r, x, G, n = 0;
                            n < b;
                            n++
                          ) {
                            var m = a.vertexes[n].x,
                              p = a.vertexes[n].y;
                            if (void 0 == l || m < l) l = m;
                            if (void 0 == r || m > r) r = m;
                            if (void 0 == x || p < x) x = p;
                            if (void 0 == G || p > G) G = p;
                          }
                          f.width = r - l + 2 * this.margin;
                          f.height = G - x + 2 * this.margin;
                          e = -l + this.margin;
                          h = -x + this.margin;
                          this.render(c, !0, 0);
                          4 == this.subType &&
                            ((k = t.createElement("canvas")),
                            (a = k.getContext("2d")),
                            (k.width = f.width),
                            (k.height = f.height),
                            this.render(a, !0, 1),
                            (g = t.createElement("canvas")),
                            (a = g.getContext("2d")),
                            (g.width = f.width),
                            (g.height = f.height),
                            this.render(a, !0, 2));
                        } else
                          1 == a.type &&
                            ((f.width = 2 * a.radius + 2 * this.margin),
                            (f.height = 2 * a.radius + 2 * this.margin),
                            this.render(c, !0, 0),
                            0 == this.subType
                              ? ((k = t.createElement("canvas")),
                                (a = k.getContext("2d")),
                                (k.width = f.width),
                                (k.height = f.height),
                                this.render(a, !0, 1))
                              : 5 == this.subType &&
                                ((k = t.createElement("canvas")),
                                (a = k.getContext("2d")),
                                (k.width = f.width),
                                (k.height = f.height),
                                this.render(a, !0, 1),
                                (g = t.createElement("canvas")),
                                (a = g.getContext("2d")),
                                (g.width = f.width),
                                (g.height = f.height),
                                this.render(a, !0, 2),
                                (d =
                                  q.frames.grid_mask_hard.renderTintedFrame(
                                    "#9d00c6"
                                  ))));
                        z = !0;
                      }
                    };
                    this.deleteNetwork = function (a, c) {
                      return c;
                    };
                    this["delete"] = function () {
                      delete A[this.id];
                    };
                    this.resume = function () {};
                    this.cleanup = function () {};
                  },
                  Nb = function (b) {
                    this.id = -1;
                    this.subType = b;
                    this.update = function (b) {};
                    this.draw = function (b) {};
                    this.drawAfter = function (b) {};
                    this.drawInfo = function (b) {};
                    this.updateNetwork = function (b, k, g) {
                      return k;
                    };
                    this.deleteNetwork = function (b, k) {
                      return k;
                    };
                    this.resume = function () {};
                    this.cleanup = function () {};
                  },
                  Ob = function () {
                    this.id = -1;
                    this.dstY =
                      this.dstX =
                      this.origY =
                      this.origX =
                      this.prevY =
                      this.prevX =
                      this.y =
                      this.x =
                        0;
                    this.energy = 255;
                    this.hue = this.dstAngle = this.origAngle = this.angle = 0;
                    this.nick = "";
                    this.type = 1;
                    this.lastUpdateTime;
                    var b = 2 * Math.random() * Math.PI,
                      f = 2 * Math.random() * Math.PI,
                      k,
                      g,
                      d,
                      e,
                      h = 2 * Math.random() * Math.PI,
                      a = 0;
                    this.canInterpolate = this.beingDeleted = !1;
                    this.beginGraby =
                      this.beginGrabX =
                      this.killedByID =
                      this.blendIn =
                        0;
                    this.flailGrabbed = !1;
                    var l;
                    this.update = function (c) {
                      c *= 0.06;
                      if (this.beingDeleted) {
                        var b = A[this.killedByID];
                        if (b) {
                          var l = Math.pow(a, 2),
                            d;
                          this.flailGrabbed
                            ? ((d = b.flailX), (b = b.flailY))
                            : ((d = b.x), (b = b.y));
                          this.x = this.beginGrabX + (d - this.beginGrabX) * l;
                          this.y = this.beginGrabY + (b - this.beginGrabY) * l;
                          a += 0.07 * c;
                          1 < a && delete A[this.id];
                        } else delete A[this.id];
                      } else
                        (c = T((D - this.lastUpdateTime) / W, 0, 1)),
                          (this.prevX = this.x),
                          (this.prevY = this.y),
                          (l = c * (this.dstY - this.origY) + this.origY),
                          (this.x = c * (this.dstX - this.origX) + this.origX),
                          (this.y = l),
                          (this.angle =
                            c * (this.dstAngle - this.origAngle) +
                            this.origAngle);
                      this.canInterpolate &&
                        ((this.blendIn += 0.1),
                        1 < this.blendIn && (this.blendIn = 1));
                    };
                    this.drawAfter = function (a) {};
                    this.draw = function (a) {
                      if (this.canInterpolate) {
                        var d = 0.1 * this.energy * 0.2;
                        0.6 < d && (d = 0.6);
                        a.save();
                        a.translate(this.x, this.y);
                        b += 0.06;
                        var d = 0.15 + d,
                          g = 0.7 - 0.05 * Math.sin(b),
                          k = 0.7 + 0.05 * Math.sin(b);
                        a.scale(g * d, k * d);
                        d = 2 + 0.5 * Math.sin(h);
                        h += 0.1;
                        a.scale(d, d);
                        a.globalAlpha = 0.5 * this.blendIn;
                        e.draw(a);
                        a.globalAlpha = 1 * this.blendIn;
                        a.scale(1 / d, 1 / d);
                        a.scale(0.5, 0.5);
                        f += 0.03;
                        a.rotate(f);
                        a.translate(-66, -66);
                        a.drawImage(l, 0, 0);
                        a.restore();
                      }
                    };
                    this.preRenderParticle = function (a) {
                      l = t.createElement("canvas");
                      var b = l.getContext("2d");
                      l.width = 132;
                      l.height = 132;
                      for (var e = 35 + 5 * Math.sin(0), h = 1; h <= a; h++) {
                        var f = (h / a) * 2 * Math.PI,
                          g = Math.sin(0 + f) * e + 66,
                          f = Math.cos(0 + f) * e + 66;
                        b.translate(g, f);
                        d.draw(b);
                        b.translate(-g, -f);
                      }
                    };
                    this.drawInput = function (a) {};
                    this.drawInfo = function (a) {};
                    this.GetRedGlowInfo = function () {
                      var a = {};
                      a.x = this.x;
                      a.y = this.y;
                      a.scale = 1.5;
                      return a;
                    };
                    this.updateNetwork = function (a, b, l) {
                      var h, f, x, v;
                      v = a.getUint16(b, !0);
                      b += 2;
                      h = a.getFloat32(b, !0);
                      b += 4;
                      f = -a.getFloat32(b, !0);
                      b += 4;
                      x = a.getFloat32(b, !0);
                      b += 4;
                      this.energy = v;
                      this.origX = this.x;
                      this.origY = this.y;
                      this.origAngle = this.angle;
                      this.dstX = 10 * h;
                      this.dstY = 10 * f;
                      this.dstAngle = x;
                      l
                        ? ((this.origX = this.dstX),
                          (this.origY = this.dstY),
                          (this.x = this.dstX),
                          (this.y = this.dstY),
                          (this.origAngle = this.dstAngle),
                          (this.hue = a.getUint16(b, !0)),
                          (b += 2),
                          (k = "hsl(" + this.hue + ", 100%, 60%)"),
                          (g = "hsl(" + this.hue + ", 100%, 30%)"),
                          (d = q.frames.energy2.renderTintedFrame(k)),
                          q.frames.energy2.renderTintedFrame(g),
                          (e = q.frames.grid_mask.renderTintedFrame(k)),
                          (this.type = a.getUint8(b)),
                          (b += 1),
                          this.preRenderParticle(this.type))
                        : (this.canInterpolate = !0);
                      this.lastUpdateTime = D;
                      return b;
                    };
                    this.deleteNetwork = function (a, b) {
                      this.flailGrabbed = a.getUint8(b);
                      b++;
                      this.beingDeleted = !0;
                      this.beginGrabX = this.x;
                      this.beginGrabY = this.y;
                      return b;
                    };
                    this.resume = function () {};
                    this.cleanup = function () {};
                    this.setKilledBy = function (a) {
                      this.killedByID = a;
                    };
                  },
                  Pb = function () {
                    var b = this,
                      f = !1,
                      k,
                      g;
                    this.objects = [];
                    this.serverVersion = this.version = 0;
                    this.loaded = this.pendingVerify = !1;
                    var d = function () {
                        this.vertexes = [];
                        this.type = 2;
                        this.add = function (a, b) {
                          this.vertexes.push({ x: a, y: b });
                        };
                        this.drawPath = function (a, b, c, d) {
                          a.beginPath();
                          d = this.vertexes.length;
                          var e = this.vertexes[0];
                          a.moveTo(e.x + b, e.y + c);
                          for (e = 1; e < d; e++) {
                            var h = this.vertexes[e];
                            a.lineTo(h.x + b, h.y + c);
                          }
                          a.closePath();
                        };
                      },
                      e = function () {
                        this.posY = this.posX = 0;
                        this.radius = 10;
                        this.type = 1;
                        this.drawPath = function (a, b, c) {
                          a.beginPath();
                          b
                            ? a.arc(
                                this.radius + c,
                                this.radius + c,
                                this.radius,
                                0,
                                2 * Math.PI
                              )
                            : a.arc(
                                this.posX,
                                this.posY,
                                this.radius,
                                0,
                                2 * Math.PI
                              );
                          a.closePath();
                        };
                      };
                    this.loadCircle = function (a, b, c) {
                      var d = new e(),
                        h = a.getFloat32(b, !0);
                      b += 4;
                      var f = a.getFloat32(b, !0);
                      b += 4;
                      a = a.getFloat32(b, !0);
                      b += 4;
                      d.posX = 10 * h;
                      d.posY = 10 * -f;
                      d.radius = 10 * a;
                      d.subType = c;
                      this.objects.push(d);
                      return b;
                    };
                    this.loadPolygon = function (a, b, c) {
                      var e = a.getUint16(b, !0);
                      b += 2;
                      var h = new d();
                      h.subType = c;
                      for (c = 0; c < e; c++) {
                        var f = a.getFloat32(b, !0);
                        b += 4;
                        var g = a.getFloat32(b, !0);
                        b += 4;
                        h.add(10 * f, 10 * -g);
                      }
                      this.objects.push(h);
                      return b;
                    };
                    this.loadColliders = function (a) {
                      this.objects = [];
                      var l = new XMLHttpRequest();
                      l.open("GET", a, !0);
                      l.responseType = "arraybuffer";
                      l.onload = function (a) {
                        if ((a = l.response)) {
                          a = new DataView(a);
                          var d = 0,
                            e = a.getUint8(d, !0),
                            d = d + 1;
                          if (191 != e) console.log("ERROR LOADING MAP FILE");
                          else {
                            e = a.getUint8(d, !0);
                            d += 1;
                            b.version = e;
                            for (console.log("Map Version: " + b.version); ; ) {
                              var h = a.getUint8(d, !0),
                                d = d + 1;
                              if (0 == h) break;
                              e = a.getUint8(d, !0);
                              d += 1;
                              if (1 == h || 2 == h)
                                (h = a.getUint8(d, !0)),
                                  (d += 1),
                                  1 == h
                                    ? (d = b.loadCircle(a, d, e))
                                    : 2 == h && (d = b.loadPolygon(a, d, e));
                            }
                            b.pendingVerify &&
                              b.verifyMapVersion(b.serverVersion);
                            b.loaded = !0;
                          }
                        }
                      };
                      l.send(null);
                      console.log("Map loaded!");
                    };
                    this.verifyMapVersion = function (a) {
                      console.log(
                        "Server map version: " + a + " Local: " + b.version
                      );
                      a < b.version
                        ? b.loadColliders("map.io.client." + a)
                        : a > b.version && n.location.reload(!0);
                    };
                    this.setPendingMapVerify = function (a) {
                      b.serverVersion = a;
                      b.pendingVerify = !0;
                    };
                    this.drawColliders = function (a) {
                      for (var b = this.objects.length, c = 0; c < b; c++)
                        this.objects[c].draw(a, 1);
                    };
                    this.drawWater = function (a) {
                      if (drawWater)
                        for (var b = this.objects.length, c = 0; c < b; c++)
                          this.objects[c].draw(a, 2);
                    };
                    this.drawGrassSand = function (a) {
                      for (var b = this.objects.length, c = 0; c < b; c++)
                        this.objects[c].draw(a, 3);
                    };
                    this.drawGradient = function (a) {
                      var b =
                          (canvas.width / 2 +
                            (y.x * y.zoom - canvas.width / 2)) /
                          y.zoom,
                        c =
                          (canvas.height / 2 +
                            (y.y * y.zoom - canvas.height / 2)) /
                          y.zoom,
                        d = 0.75 * C,
                        d = a.createLinearGradient(0, -d, 0, d);
                      d.addColorStop(0, "rgba(0,0,0,0.0)");
                      d.addColorStop(1, "rgba(0,0,255,0.5)");
                      a.globalAlpha = 0.5;
                      a.fillStyle = d;
                      a.fillRect(
                        b - canvas.width / 2 / y.zoom,
                        c - canvas.height / 2 / y.zoom,
                        canvas.width / y.zoom,
                        canvas.height / y.zoom
                      );
                      a.globalAlpha = 1;
                    };
                    this.preRenderSideLine = function (a) {
                      var b = t.createElement("canvas"),
                        c = b.getContext("2d");
                      a
                        ? ((b.width = 60), (b.height = C + 60))
                        : ((b.width = J + 60), (b.height = 60));
                      c.strokeStyle = "#0bdfff";
                      c.beginPath();
                      c.lineCap = "round";
                      c.moveTo(30, 30);
                      a ? c.lineTo(30, 30 + C) : c.lineTo(30 + J, 30);
                      c.shadowColor = "#0bdfff";
                      c.shadowBlur = 30;
                      c.lineWidth = 5;
                      c.stroke();
                      return b;
                    };
                    this.preRenderSideLines = function () {
                      k = this.preRenderSideLine(!0);
                      g = this.preRenderSideLine(!1);
                      f = !0;
                    };
                    this.drawLimits = function (a) {
                      var b = 2 * C,
                        c = y.getBounds(),
                        d = J / 2;
                      if (!f || Ra) (Ra = !1), this.preRenderSideLines();
                      d <= c[1].x &&
                        ((a.fillStyle = "#023139"),
                        a.fillRect(d, -b / 2, 2500, b));
                      -d >= c[0].x &&
                        ((a.fillStyle = "#023139"),
                        a.fillRect(-d - 2500, -b / 2, 2500, b));
                      -C / 2 > c[0].y &&
                        ((a.fillStyle = "#023139"),
                        a.fillRect(-d - 2, -C / 2 - 2500, 2 * d + 4, 2500));
                      C / 2 < c[1].y &&
                        ((a.fillStyle = "#023139"),
                        a.fillRect(-d - 2, C / 2, 2 * d + 4, 2500));
                      d <= c[1].x && a.drawImage(k, d - 30, -C / 2 - 30);
                      -d >= c[0].x && a.drawImage(k, -d - 30, -C / 2 - 30);
                      -C / 2 > c[0].y && a.drawImage(g, -d - 30, -C / 2 - 30);
                      C / 2 < c[1].y && a.drawImage(g, -d - 30, C / 2 - 30);
                    };
                    this.draw = function (a) {
                      var b = y.getBounds(),
                        c = 1 / y.zoom;
                      a.save();
                      a.globalCompositeOperation = "source-over";
                      a.fillStyle = q.bgGrid;
                      a.fillRect(
                        b[0].x,
                        b[0].y,
                        canvas.width * c,
                        canvas.height * c
                      );
                      a.restore();
                    };
                    var h = !1;
                    this.update = function (a) {
                      if (ba || !h) h = !0;
                    };
                  },
                  Qb = function () {
                    var b = [],
                      f,
                      k,
                      g = 0;
                    this.radiusFromMinimapRadiusPerc = function (b) {
                      return (b = (8e3 / J) * (3 + 8 * b));
                    };
                    this.radiusToMinimapRadius = function (b) {
                      return this.radiusFromMinimapRadiusPerc((b - 1) / 540);
                    };
                    this.draw = function (b) {
                      if (F.loaded) {
                        var e = Q - 150 * s - 30 * s,
                          h = $ - 150 * s - 30 * s;
                        b.save();
                        var a = s != g;
                        g = s;
                        (k && !a) || this.preRenderColliders();
                        b.drawImage(k, e - 5 * s, h - 5 * s);
                        f && b.drawImage(f, e - 5 * s, h - 5 * s);
                        if (w) {
                          var a = (w.flailX + J / 2) / J,
                            l = (w.flailY + C / 2) / C,
                            c = this.radiusToMinimapRadius(w.flailRadius);
                          b.fillStyle = "hsl(" + w.hue + ", 100%, 50%)";
                          b.strokeStyle = "hsl(" + w.hue + ", 100%, 40%)";
                          b.lineWidth = 1;
                          b.beginPath();
                          b.arc(
                            e + 150 * a * s,
                            h + 150 * l * s,
                            c * s,
                            0,
                            2 * Math.PI
                          );
                          b.fill();
                          if (w.attached)
                            b.beginPath(),
                              b.arc(
                                e + 150 * a * s,
                                h + 150 * l * s,
                                (c + 2) * s,
                                0,
                                2 * Math.PI
                              ),
                              b.stroke();
                          else {
                            var l = w.y + C / 2,
                              a = (w.x + J / 2) / J,
                              l = l / C,
                              c = 4 * s,
                              r = 6 * s;
                            b.translate(e + 150 * a * s, h + 150 * l * s);
                            b.rotate(-w.angle);
                            b.beginPath();
                            b.rect(-c / 2, -r / 2, c, r);
                            b.fill();
                          }
                        }
                        b.restore();
                      }
                    };
                    this.update = function (b) {};
                    this.updateInfo = function (d) {
                      var e = 1,
                        h = d.getUint16(e, !0),
                        e = e + 2;
                      b = [];
                      for (var a = 0; a < h; a++) {
                        var l = d.getUint8(e++, !0),
                          c = d.getUint8(e++, !0),
                          f = d.getUint8(e++, !0);
                        b.push({ x: l, y: 256 - c, r: f });
                      }
                      this.preRenderPlayers();
                    };
                    this.preRenderPlayers = function () {
                      f = t.createElement("canvas");
                      var d = f.getContext("2d");
                      f.width = 160 * s;
                      f.height = 160 * s;
                      var e = b.length;
                      mb = e;
                      for (var h = 0; h < e; h++) {
                        var a = b[h],
                          l = parseInt(a.x) / 256,
                          c = parseInt(a.y) / 256,
                          a = this.radiusFromMinimapRadiusPerc(a.r / 256);
                        d.fillStyle = "#777777";
                        d.beginPath();
                        d.arc(
                          5 * s + 150 * l * s,
                          5 * s + 150 * c * s,
                          a * s,
                          0,
                          2 * Math.PI
                        );
                        d.fill();
                      }
                    };
                    this.preRenderColliders = function () {
                      if (F.loaded) {
                        k = t.createElement("canvas");
                        var b = k.getContext("2d");
                        k.width = 160 * s;
                        k.height = 160 * s;
                        b.lineWidth = 3;
                        b.strokeStyle = "#00FFFF";
                        b.fillStyle = "#002222";
                        var e = 5 * s,
                          h,
                          a = 150 * s;
                        da(b, e, e, a, a, 10);
                        b.stroke();
                        b.globalAlpha = 0.9;
                        b.globalAlpha = 1;
                        for (
                          var a = (150 * s) / J,
                            l = F.objects,
                            c = l.length,
                            f = 0;
                          f < c;
                          f++
                        ) {
                          var g = l[f];
                          if (1 == g.type) {
                            e = g.posX;
                            h = g.posY;
                            var n = g.radius,
                              e = (e + J / 2) / J;
                            h = (h + C / 2) / C;
                            b.fillStyle = "#00FF00";
                            b.beginPath();
                            b.arc(
                              150 * e * s + 5 * s,
                              150 * h * s + 5 * s,
                              n * a,
                              0,
                              2 * Math.PI
                            );
                            b.fill();
                          } else if (4 != g.subType) {
                            switch (g.subType) {
                              case 1:
                                e = "#0bdfff";
                                break;
                              case 2:
                                e = "#FF0000";
                                break;
                              default:
                                e = "#FFFFFF";
                            }
                            b.fillStyle = e;
                            b.lineWidth = 1;
                            var n = J / 2,
                              m = C / 2,
                              g = g.vertexes,
                              x = g.length;
                            b.beginPath();
                            for (var v = 0; v < x; v++)
                              (e = (g[v].x + n) * a + 5 * s),
                                (h = (g[v].y + m) * a + 5 * s),
                                0 == v ? b.moveTo(e, h) : b.lineTo(e, h);
                            b.closePath();
                            b.fill();
                          }
                        }
                      }
                    };
                  },
                  Sb = function () {
                    function b(a) {
                      for (var b = 1; ; ) {
                        var c = a.getUint8(b, !0),
                          b = b + 1;
                        if (0 == c) break;
                        switch (c) {
                          case 1:
                            a.getUint16(b, !0);
                            b += 2;
                            b = va(a, b);
                            c = b.nick;
                            b = b.offset;
                            B.addMessage("YOU DELETED", !0, ka(c));
                            y.shake();
                            break;
                          case 2:
                            a.getUint16(b, !0);
                            b += 2;
                            b = va(a, b);
                            c = b.nick;
                            b = b.offset;
                            B.addMessage("DELETED BY", !1, ka(c));
                            y.shake();
                            break;
                          default:
                            console.log("Unknown event code");
                        }
                      }
                    }
                    function f(a, b) {
                      for (var c = 1, d = [], e = !1; ; ) {
                        var h = a.getUint16(c, !0),
                          c = c + 2;
                        if (0 == h) break;
                        var e = !0,
                          f;
                        165 == b
                          ? ((f = a.getUint16(c, !0)), (c += 2))
                          : ((f = a.getUint32(c, !0)), (c += 4));
                        var c = va(a, c),
                          g = c.nick,
                          c = c.offset,
                          k = {};
                        k.nick = g;
                        k.score = f;
                        k.id = h;
                        d.push(k);
                      }
                      e && B.refreshLeaderboard(d);
                      return c;
                    }
                    function k(a, b) {
                      for (var c = 1; ; ) {
                        var d = a.getUint16(c, !0),
                          c = c + 2;
                        if (0 == d) {
                          c != a.byteLength &&
                            ((la = a.getUint16(c, !0)),
                            (c += 2),
                            0 < la &&
                              ((d = a.getFloat32(c, !0)),
                              (c += 4),
                              (c = -a.getFloat32(c, !0)),
                              (Ua = Sa),
                              (Va = Ta),
                              (ob = 10 * d),
                              (pb = 10 * c),
                              (qb = D)));
                          break;
                        }
                        var e = a.getUint8(c, !0),
                          c = c + 1,
                          h;
                        switch (e) {
                          case 0:
                            (h = A[d])
                              ? (c = h.updateNetwork(a, c, !1, b))
                              : console.log(
                                  "entity with id: " + d + " not found"
                                );
                            break;
                          case 1:
                            var e = a.getUint8(c, !0),
                              c = c + 1,
                              f = a.getUint8(c, !0),
                              c = c + 1,
                              c = va(a, c),
                              g = c.nick,
                              c = c.offset;
                            h = e;
                            var k = null;
                            switch (h) {
                              case 5:
                                k = new Ib();
                                break;
                              case 4:
                                0 == f
                                  ? (k = new Jb())
                                  : 1 == f
                                  ? (k = new Ob())
                                  : 2 == f || 3 == f
                                  ? (k = new Lb(f))
                                  : 4 == f && (k = new Rb(f));
                                break;
                              case 1:
                                k = 3 == f ? new Nb() : new Mb(f);
                                break;
                              default:
                                console.log(
                                  "ERROR: Creating unknown entity type: " +
                                    h +
                                    " Subtype: " +
                                    f
                                ),
                                  assert(!1, "Invalid Entity");
                            }
                            (h = k)
                              ? ((h.nick = g),
                                (h.id = d),
                                (A[d] = h),
                                (c = h.updateNetwork(a, c, !0, b)))
                              : console.log(
                                  "Unable to create entity. Entity Type is: " +
                                    e
                                );
                            break;
                          case 2:
                            e = a.getUint16(c, !0);
                            c += 2;
                            g = a.getUint8(c);
                            c += 1;
                            (h = A[d])
                              ? ((h.killReason = g),
                                (h.killedByID = e),
                                (d = h == w),
                                (c = h.deleteNetwork(a, c)),
                                d &&
                                  K &&
                                  ((K = !1),
                                  (w = null),
                                  (L.angle = Math.PI),
                                  (L.throttle = 0),
                                  B.clearTip(),
                                  Cb++,
                                  Db++,
                                  Ha() && E.resetTutorial(),
                                  fb()))
                              : console.log(
                                  "ERROR: Entity does not exist: " + d
                                );
                            break;
                          default:
                            console.log("Invalid entity flag");
                        }
                      }
                    }
                    var g, d;
                    this.sentHello = this.hasConnection = !1;
                    this.remoteHost = null;
                    this.connectRetry = 0;
                    this.lastUpdateBool = !1;
                    this.roomNumber = 0;
                    this.directed = !1;
                    this.roomID = 0;
                    var e = wa,
                      e = 1 == Ja || 3 == Ja ? wa + ":81/" : "master." + wa;
                    this.getServerAndConnect = function () {
                      var a = null,
                        a = "",
                        b;
                      Ga() || (b = parent.location.hash);
                      if (b)
                        (a = b),
                          (a = a.substring(1, a.length)),
                          (a = ";" + a),
                          (p.directed = !0);
                      else if (fa.ip) {
                        a = fa.ip;
                        a = a.replace("%3A", ":");
                        p.remoteHost = a;
                        p.connect();
                        return;
                      }
                      b = za;
                      fa.cc && (b = fa.cc);
                      if (void 0 == b) setTimeout(p.getServerAndConnect, 200);
                      else {
                        var c = "";
                        Ka && (c = "s");
                        m.ajax({
                          url: "http" + c + "://" + e,
                          type: "PUT",
                          success: function (a) {
                            if ("0" == a || "1" == a)
                              m("#topGui").hide(),
                                m("#topGuiConnecting").hide(),
                                m("#roomFailed").show(),
                                m("#tips").hide(),
                                (a =
                                  "0" == a
                                    ? "LINK EXPIRED!"
                                    : "SERVER IS FULL!"),
                                (m("#linkText")[0].innerHTML = a);
                            else {
                              a = a.split("!");
                              p.roomID = 0;
                              1 < a.length && (p.roomID = a[1]);
                              var b = a[0];
                              a = b.split("/");
                              p.roomNumber = 0;
                              1 < a.length &&
                                ((p.roomNumber = a[1]), (b = a[0]));
                              p.remoteHost = b;
                              p.connect();
                            }
                          },
                          error: function () {
                            setTimeout(p.getServerAndConnect, 1e3);
                          },
                          dataType: "text",
                          contentType: "text/plain",
                          method: "PUT",
                          cache: !1,
                          crossDomain: !0,
                          data: b + a,
                        });
                      }
                    };
                    this.connect = function () {
                      if (U || H) {
                        var a = "ws://" + p.remoteHost;
                        if (Ka) {
                          var b = p.remoteHost.split(":"),
                            a = b[1],
                            b = b[0].split("."),
                            a = parseInt(a) + 1e3;
                          0 < p.roomNumber &&
                            (a = parseInt(p.roomNumber) + 8080 + 1e3);
                          a =
                            "wss://" +
                            b[0] +
                            "-" +
                            b[1] +
                            "-" +
                            b[2] +
                            "-" +
                            b[3] +
                            ".brutal.io:" +
                            a;
                        } else
                          0 < p.roomNumber &&
                            (a =
                              "ws:" +
                              a.split(":")[1] +
                              ":" +
                              (parseInt(p.roomNumber) + 8080));
                        H && console.log("Connecting to " + a + "...");
                        try {
                          g = new WebSocket(a);
                        } catch (c) {
                          setTimeout(p.getServerAndConnect, 1e3);
                          return;
                        }
                        g.binaryType = "arraybuffer";
                        g.onopen = p.onSocketOpen;
                        g.onclose = p.onSocketClose;
                        g.onmessage = p.onSocketMessage;
                        g.onerror = p.onError;
                      } else setTimeout(p.getServerAndConnect, 100);
                    };
                    this.disconnect = function () {
                      w = null;
                      N = 0;
                      p.directed &&
                        (Ga() || (n.location.hash = ""), (p.directed = !1));
                      p.roomID = 0;
                      g && g.close();
                    };
                    this.onSocketOpen = function (a) {
                      n.didSendLoadingTime ||
                        ((a = +new Date() - n.startTime),
                        n.stats && console.log("ltct " + a),
                        n.mixpanel &&
                          n.mixpanel.track("Load Time To Play", {
                            deltatime: a,
                            domain: n.location.hostname,
                          }),
                        (n.didSendLoadingTime = !0));
                      H && console.log("Connected!");
                      p.connectRetry = 0;
                      p.hasConnection = !0;
                      p.directed = !1;
                      q.loaded && p.hello();
                      y.reset();
                    };
                    this.onSocketClose = function (a) {
                      p.connectionClosed();
                    };
                    this.onSocketMessage = function (a) {
                      p.processMessage(a.data);
                    };
                    this.onError = function (a) {
                      console.log("socket error");
                    };
                    this.hello = function () {
                      p.sendHello();
                      p.ping();
                      p.sentHello = !0;
                      m("#copyLink").fadeIn(300);
                      m("#topGui").show();
                      m("#topGuiConnecting").hide();
                      m(".btn-needs-server").removeAttr("disabled");
                      m("#nick").focus();
                    };
                    var h;
                    this.processMessage = function (a) {
                      a = new DataView(a);
                      var e = a.getUint8(0);
                      if (0 == e)
                        H &&
                          ((a = +new Date() - d),
                          (void 0).updateLag(a),
                          150 < a
                            ? this.ping()
                            : setTimeout(function () {
                                p.ping();
                              }, 150 - a));
                      else if (160 == e) {
                        var c = 1,
                          e = a.getFloat32(c, !0),
                          c = c + 4,
                          g = a.getFloat32(c, !0);
                        a = a.getUint8(c + 4, !0);
                        F.loaded
                          ? F.verifyMapVersion(a)
                          : F.setPendingMapVerify(a);
                        J = 10 * e;
                        C = 10 * g;
                        H &&
                          console.log("Received Map Config: " + J + ", " + C);
                        Ra = nb = !0;
                      } else
                        161 == e
                          ? ((ba = !0),
                            m("#firstRightBox").hide(),
                            m("#mobileBoxId").hide(),
                            m("#afterRightBox").show(),
                            m("#linksID").css({ bottom: "38px" }),
                            (c = 1),
                            (g = a.getUint32(c, !0)),
                            (c += 4),
                            (N = g),
                            (aa = 0),
                            (K = !0),
                            eb())
                          : 180 == e || 179 == e
                          ? ((c = +new Date()),
                            (g = c - h),
                            150 < g &&
                              H &&
                              console.log("Delta: " + g + " - LAG WARNING !"),
                            (h = c),
                            k(a, e),
                            (objectCount = Object.keys(A).length),
                            (t.title =
                              0 < objectCount && H
                                ? "brutal.io (" + mb + ", " + objectCount + ")"
                                : "brutal.io!"))
                          : 164 == e
                          ? b(a)
                          : 165 == e || 181 == e
                          ? ((c = f(a, e)),
                            (g = a.getUint16(c, !0)),
                            (c += 2),
                            0 < g
                              ? (165 == e
                                  ? ((e = a.getUint16(c, !0)), (c += 2))
                                  : ((e = a.getUint32(c, !0)), (c += 4)),
                                (g = a.getUint16(c, !0)),
                                (c += 2),
                                B.updateRank(g, e))
                              : B.updateRank(0, 0),
                            (e = a.getUint32(c, !0)),
                            (c += 4),
                            (a = a.getUint32(c, !0)),
                            (c += 4),
                            Ya &&
                              console.log(
                                "GrabbedEnergy: " +
                                  e +
                                  ", ToBeGrabbedEnergy: " +
                                  a +
                                  " TOTAL: " +
                                  (e + a)
                              ))
                          : 166 == e && ya.updateInfo(a);
                    };
                    this.connectionClosed = function () {
                      E.gameCleanup();
                      p.sentHello = !1;
                      p.hasConnection = !1;
                      fb(-1);
                      m("#topGui").hide();
                      m("#topGuiConnecting").show();
                      m("#copyLink").fadeOut(300);
                      m(".btn-needs-server").attr("disabled", "disabled");
                      var a = this.connectRetry;
                      5 < a && (a = 5);
                      setTimeout(this.getServerAndConnect, 1e3 + 1e3 * a);
                      p.connectRetry++;
                    };
                    this.sendSingleByte = function (a) {
                      var b = new ArrayBuffer(1);
                      new DataView(b).setUint8(0, a);
                      g.send(b);
                    };
                    this.sendHello = function () {
                      var a = new ArrayBuffer(5),
                        b = new DataView(a);
                      b.setUint8(0, 1);
                      b.setUint16(1, (Q / 10) * 1, !0);
                      b.setUint16(3, ($ / 10) * 1, !0);
                      g.send(a);
                    };
                    this.sendNick = function (a, b) {
                      myName = a;
                      var c = new ArrayBuffer(3 + 2 * a.length),
                        d = new DataView(c);
                      d.setUint8(0, 3);
                      for (var e = 0; e < a.length; ++e)
                        d.setUint16(1 + 2 * e, a.charCodeAt(e), !0);
                      g.send(c);
                    };
                    this.sendInput = function () {
                      var a = new ArrayBuffer(10),
                        b = new DataView(a);
                      b.setUint8(0, 5);
                      b.setFloat64(1, L.angle, !0);
                      var c = 0;
                      if (L.throttle || !U) c |= 1;
                      if (!U || S) c |= 2;
                      b.setUint8(9, c, !0);
                      g.send(a);
                    };
                    this.sendResize = function () {
                      var a = new ArrayBuffer(5),
                        b = new DataView(a);
                      b.setUint8(0, 7);
                      b.setUint16(1, (Q / 10) * 1, !0);
                      b.setUint16(3, ($ / 10) * 1, !0);
                      g.send(a);
                    };
                    this.sendClick = function (a) {
                      var b = new ArrayBuffer(2),
                        c = new DataView(b);
                      c.setUint8(0, 8);
                      a ? c.setUint8(1, 1) : c.setUint8(1, 0);
                      g.send(b);
                    };
                    this.leave = function () {
                      var a = new ArrayBuffer(1);
                      new DataView(a).setUint8(0, 4);
                      g.send(a);
                    };
                    this.ping = function () {
                      if (this.hasConnection) {
                        var a = new ArrayBuffer(1);
                        new DataView(a).setUint8(0, 0);
                        g.send(a);
                        d = +new Date();
                      }
                    };
                  },
                  Vb = function (b) {
                    function f() {
                      K && p.hasConnection && p.sendInput();
                    }
                    var k = this,
                      g,
                      d;
                    this.context = d;
                    var e = [{}, {}],
                      h = 0,
                      a = 1e3,
                      l = !1,
                      c = 0,
                      r = 0,
                      z = 0;
                    k.getTutorialState = function () {
                      return h;
                    };
                    k.setTutorialState = function (a) {
                      h != a && (h = a);
                    };
                    k.resetTutorial = function () {
                      l = !0;
                      h = 0;
                      a = 1e3;
                    };
                    k.update = function (b) {
                      w && !w.inGame && 0 == oa && (w = null);
                      B && B.update(b);
                      laserExists = !1;
                      for (var c in A) A[c].update(b), c == N && (w = A[c]);
                      y.update(b);
                      V.update(b);
                      sa =
                        (g.width / 2 + (y.x * y.zoom - g.width / 2)) / y.zoom;
                      ta =
                        (g.height / 2 + (y.y * y.zoom - g.height / 2)) / y.zoom;
                      0 < aa &&
                        1 < cameraSmooth &&
                        ((cameraSmooth -= 0.2),
                        1 > cameraSmooth && (cameraSmooth = 1));
                      F.update(b);
                      ya.update(b);
                      this.updateOffscreenInfo(0);
                      0 < la && this.updateOffscreenInfo(1);
                      if (null != w)
                        if (L.mouseMoved) {
                          c = 1;
                          R || (c = 2);
                          $a =
                            (jb + (y.x * y.zoom - (g.width * c) / 2)) / y.zoom;
                          ab =
                            (kb + (y.y * y.zoom - (g.height * c) / 2)) / y.zoom;
                          c = $a - w.x;
                          var d = ab - w.y,
                            e = Math.sqrt(c * c + d * d);
                          c /= e;
                          d /= e;
                          L.throttle = e > 75 / ea ? 1 : 0;
                          var f = (e = 0);
                          U && ((e = c), (f = -d));
                          0 != e &&
                            ((c = Math.atan(f / e)),
                            0 > e && (c = Math.PI + c),
                            (c += Math.PI / 2),
                            (L.angle = c));
                        } else (L.throttle = 0), (L.angle = Math.PI);
                      l &&
                        w &&
                        K &&
                        (0 == h
                          ? ((a -= b), 0 > a && (h = 1))
                          : 1 == h
                          ? ((h = 2),
                            B.showTip(
                              "CLICK TO RELEASE FLAIL FROM YOUR CAR",
                              0
                            ))
                          : 3 == h
                          ? ((h = 4), B.clearTip())
                          : 4 != h &&
                            (5 == h
                              ? ((h = 6),
                                B.showTip(
                                  "CLICK AND HOLD TO ATTRACT FLAIL",
                                  0,
                                  "#00FF00",
                                  "#006600"
                                ))
                              : 7 == h &&
                                (B.clearTip(),
                                n.localStorage.tutorial
                                  ? n.localStorage.tutorial++
                                  : (n.localStorage.tutorial = 1),
                                (l = !1))));
                    };
                    k.draw = function (a) {
                      if (q.loaded)
                        if (ba) {
                          if ((y.setupContext(d), F.draw(d), nb)) {
                            for (var b in A) {
                              var e = A[b];
                              e.draw(d, a);
                            }
                            for (b in A) (e = A[b]), e.drawAfter(d, a);
                            for (b in A) A[b].drawInfo(d);
                            V.drawBehind(d);
                            V.drawLayer2(d);
                            V.draw(d);
                            V.drawExplosions(d);
                            rb.draw(d);
                            F.drawLimits(d);
                            K && w && w.drawInput(d);
                            this.drawOffscreenInfo(d, 0);
                            0 < la && this.drawOffscreenInfo(d, 1);
                            y.startUILayer();
                            K && ya.draw(d);
                            Wa && B.draw(d);
                            y.setupContext(d);
                          }
                        } else
                          y.startUILayer(),
                            q.splashScreenLoaded &&
                              (d.scale(z, z),
                              d.drawImage(q.splashScreen, c, r));
                    };
                    k.updateOffscreenInfo = function (a) {
                      if (null != w) {
                        var b = y.getBounds(),
                          c = b[1].x,
                          d = b[0].x,
                          h = b[0].y,
                          f = b[1].y,
                          g,
                          l;
                        0 == a
                          ? ((g = w.flailX), (l = w.flailY))
                          : ((b = T((D - qb) / W, 0, 1)),
                            (Sa = b * (ob - Ua) + Ua),
                            (Ta = b * (pb - Va) + Va),
                            (g = Sa),
                            (l = Ta));
                        b = 0 == a ? w.flailRadius + 30 : 50;
                        if (w && !hb(g, l, b)) {
                          var b = sa - g,
                            k = (ta - l) / b,
                            r = ta - k * sa;
                          e[a].y = 0 > b ? k * c + r : k * d + r;
                          e[a].y < h
                            ? (e[a].y = h)
                            : e[a].y > f && (e[a].y = f);
                          e[a].x = (e[a].y - r) / k;
                          c = e[a].x - g;
                          d = e[a].y - l;
                          c = Math.sqrt(c * c + d * d);
                          e[a].scale = 1;
                          300 < c &&
                            ((e[a].scale = 1 - (c - 300) / 4e3),
                            (c = 0 == a ? 0.4 : 0.5),
                            e[a].scale < c && (e[a].scale = c));
                          1 == a && (e[a].scale += 0.1);
                          1 < k ? (k = 1) : -1 > k && (k = -1);
                          e[a].angle = Math.acos(k);
                          0 > b && (e[a].angle += Math.PI);
                          e[a].outside = !0;
                        } else e[a].outside = !1;
                      }
                    };
                    k.drawOffscreenInfo = function (a, b) {
                      if (w && e[b].outside) {
                        a.save();
                        a.translate(e[b].x, e[b].y);
                        a.save();
                        var c = ib(0, 50, -e[b].angle);
                        a.translate(c.x, c.y);
                        a.scale(e[b].scale, e[b].scale);
                        c = w.hue;
                        if (0 == b) {
                          if ((w.drawFlailIcon(a), w.decay)) {
                            var d = ib(0, 30, -e[b].angle);
                            a.translate(d.x, d.y);
                            q.frames.decay_alert.draw(a);
                          }
                        } else q.frames.crown.draw(a), (c = 47);
                        a.restore();
                        a.rotate(-e[b].angle);
                        a.translate(0, 30);
                        d = 0.9;
                        1 == b && (d *= e[b].scale);
                        a.fillStyle = "hsl(" + c + ", 100%, 70%)";
                        a.beginPath();
                        a.moveTo(-8 * d, 0);
                        a.lineTo(8 * d, 0);
                        a.lineTo(0, -20 * d);
                        a.fill();
                        a.restore();
                      }
                    };
                    k.gameCleanup = function () {
                      w = void 0;
                      K = !1;
                      for (id in A) delete A[id];
                      A = {};
                    };
                    k.updateBackgroundImage = function () {
                      var a = 1,
                        a = $ / q.splashScreen.height,
                        b = Q / q.splashScreen.width;
                      b > a && (a = b);
                      var b = Q / a,
                        d = $ / a,
                        e = q.splashScreen.width,
                        h = q.splashScreen.height;
                      z = a;
                      c = b / 2 - e / 2;
                      r = d / 2 - h / 2;
                    };
                    var G;
                    k.resize = function (a) {
                      t();
                      !ba && q.splashScreenLoaded && k.updateBackgroundImage();
                      p.hasConnection &&
                        (G && clearTimeout(G),
                        (G = setTimeout(p.sendResize, 200)));
                    };
                    var t = function () {
                      var a = 2;
                      R && (a = 1);
                      g.width = n.innerWidth / a;
                      g.height = n.innerHeight / a;
                      Q = g.width;
                      $ = g.height;
                      var b = $ * a,
                        c = -50 + 50 * a + "%",
                        a = "translate(" + c + "," + c + ") scale(" + a + ")";
                      m("#canvas").css({ transform: a });
                      m("#canvas").css({ "-ms-transform": a });
                      m("#canvas").css({ "-webkit-transform": a });
                      s = 0.92 * Math.max($ / 1e3, Q / 1800);
                      s *= n.devicePixelRatio / Na;
                      c = Math.min(1, b / 1e3);
                      a = 900 * c;
                      0 < a &&
                        ((c = "translate(-50%,0%) scale(" + c + ")"),
                        m("#mainDialog").css({ transform: c }),
                        m("#mainDialog").css({ "-ms-transform": c }),
                        m("#mainDialog").css({ "-webkit-transform": c }),
                        (b = b / 2 - 0.28 * a),
                        m("#mainDialog").css({ top: b + "px" }));
                    };
                    g = b;
                    d = g.getContext("2d");
                    k.context = d;
                    t();
                    F = new Pb();
                    F.loadColliders("map.io.client");
                    V = new Tb();
                    q = new Eb();
                    q.load(function () {
                      console.log("Resources loaded!");
                      B = new Hb();
                      rb = new Gb();
                      p.hasConnection && !p.sentHello && p.hello();
                      setInterval(f, 40);
                    });
                    l = Ha();
                    myName = "";
                    y = new Ub(g, d, 0, -2e3);
                    ya = new Qb();
                    p = new Sb();
                    p.getServerAndConnect();
                  },
                  Ub = function (b, f, k, g) {
                    var d = this;
                    this.x = k;
                    this.y = g;
                    this.minZoom = 1;
                    this.maxZoom = 2;
                    this.zoom = this.minZoom;
                    var e = 0,
                      h,
                      a = 0,
                      l = 0,
                      c = 0,
                      r = 0;
                    this.setupContext = function (a) {
                      var e = d.zoom;
                      ha && ((Z -= 0.01), 0 > Z && (Z = 0), (e *= Z));
                      var h = b.width / 2 - d.x * e,
                        f = b.height / 2 - d.y * e;
                      a.setTransform(1, 0, 0, 1, 0, 0);
                      a.translate(h + c, f + r);
                      a.rotate(1 - Z);
                      a.scale(e, e);
                    };
                    this.applyShake = function (b) {
                      if (ba)
                        if (0 < e) {
                          var d = h;
                          250 > e && (d = (e / 1e3 / 0.5) * h);
                          a += 1;
                          l += 1.1;
                          var f = Math.sin(a) * (d / 4),
                            d = Math.cos(l) * d;
                          c = f;
                          r = d;
                          e -= b;
                        } else r = c = 0;
                    };
                    this.update = function (a) {
                      if (K || 1 != oa || S)
                        Qa && (xa = 0.3),
                          (ea += (xa - ea) / 10),
                          (d.zoom = (1 / (n.devicePixelRatio / Na)) * ea * 1),
                          (d.zoom *= s);
                      var b = d.x,
                        c = d.y;
                      if (w) (b = w.x), (c = w.y);
                      else if (0 < aa) {
                        var e = A[aa];
                        e &&
                          ((b += (e.x - b) / cameraSmooth),
                          (c += (e.y - c) / cameraSmooth));
                      }
                      d.x = b;
                      d.y = c;
                      this.applyShake(a);
                    };
                    this.setPosition = function (a, b) {
                      d.x = a;
                      d.y = b;
                    };
                    this.shake = function () {
                      ba && ((e = 500), (h = 15));
                    };
                    this.getBounds = function () {
                      return [
                        {
                          x: d.x - b.width / 2 / d.zoom,
                          y: d.y - b.height / 2 / d.zoom,
                        },
                        {
                          x: d.x + b.width / 2 / d.zoom,
                          y: d.y + b.height / 2 / d.zoom,
                        },
                      ];
                    };
                    this.getOuterBounds = function () {
                      return [
                        {
                          x: d.x - b.width / 2 / d.minZoom,
                          y: d.y - b.height / 2 / d.minZoom,
                        },
                        {
                          x: d.x + b.width / 2 / d.minZoom,
                          y: d.y + b.height / 2 / d.minZoom,
                        },
                      ];
                    };
                    this.getInnerBounds = function () {
                      return [
                        {
                          x: d.x - b.width / 2 / d.maxZoom,
                          y: d.y - b.height / 2 / d.maxZoom,
                        },
                        {
                          x: d.x + b.width / 2 / d.maxZoom,
                          y: d.y + b.height / 2 / d.maxZoom,
                        },
                      ];
                    };
                    this.startUILayer = function () {
                      f.setTransform(1, 0, 0, 1, 0, 0);
                    };
                    this.reset = function () {
                      this.x = 0;
                      this.y = -2e3;
                      xa = 1.2;
                    };
                  },
                  Ca = function () {
                    this.width;
                    this.height;
                    var b,
                      f,
                      k,
                      g,
                      d = void 0;
                    this.y = this.x = 0;
                    var e, h;
                    this.canvas;
                    this.frameWithCanvas = function (a, b, c) {
                      this.width = a.width;
                      this.height = a.height;
                      this.canvas = a;
                      e = b;
                      h = c;
                    };
                    this.setFrameInfo = function (a, l) {
                      d = l;
                      b = a[1];
                      f = a[2];
                      this.width = a[3];
                      this.height = a[4];
                      k = a[5];
                      g = a[6];
                      e = -this.width * k;
                      h = -this.height * g;
                    };
                    this.draw = function (a) {
                      d
                        ? a.drawImage(
                            d,
                            b,
                            f,
                            this.width,
                            this.height,
                            e + this.x,
                            h + this.y,
                            this.width,
                            this.height
                          )
                        : a.drawImage(
                            this.canvas,
                            0,
                            0,
                            this.width,
                            this.height,
                            e + this.x,
                            h + this.y,
                            this.width,
                            this.height
                          );
                    };
                    this.renderTintedFrame = function (a) {
                      var g = t.createElement("canvas"),
                        c = g.getContext("2d");
                      g.width = this.width;
                      g.height = this.height;
                      var k = t.createElement("canvas");
                      k.width = this.width;
                      k.height = this.height;
                      var n = k.getContext("2d");
                      n.fillStyle = a;
                      n.fillRect(0, 0, k.width, k.height);
                      n.globalCompositeOperation = "destination-atop";
                      n.drawImage(
                        d,
                        b,
                        f,
                        this.width,
                        this.height,
                        0,
                        0,
                        this.width,
                        this.height
                      );
                      c.globalAlpha = 1;
                      c.drawImage(k, 0, 0);
                      a = new Ca();
                      a.frameWithCanvas(g, e, h);
                      return a;
                    };
                    this.getImageCopy = function () {
                      var a = t.createElement("canvas");
                      a.width = this.width;
                      a.height = this.height;
                      var e = a.getContext("2d");
                      e.drawImage(
                        d,
                        b,
                        f,
                        this.width,
                        this.height,
                        0,
                        0,
                        this.width,
                        this.height
                      );
                      var c = e.getImageData(0, 0, this.width, this.height);
                      return { canvas: a, ctx: e, toData: c.data, to: c };
                    };
                    this.generateTintImage2 = function (a, g, c, k) {
                      var n = t.createElement("canvas");
                      n.width = this.width;
                      n.height = this.height;
                      var m = n.getContext("2d");
                      m.drawImage(
                        d,
                        b,
                        f,
                        this.width,
                        this.height,
                        0,
                        0,
                        this.width,
                        this.height
                      );
                      for (
                        var p = m.getImageData(0, 0, this.width, this.height),
                          q = p.data,
                          s = q.length,
                          u = 0;
                        u < s;

                      )
                        (q[u] = q[u++] * (1 - k) + a * k),
                          (q[u] = q[u++] * (1 - k) + g * k),
                          (q[u] = q[u++] * (1 - k) + c * k),
                          (q[u] = 0.8 * q[u++]);
                      m.putImageData(p, 0, 0);
                      a = new Ca();
                      a.frameWithCanvas(n, e, h);
                      return a;
                    };
                    this.generateTintImage = function (a, b, c, d) {
                      var g = t.createElement("canvas");
                      g.width = this.width;
                      g.height = this.height;
                      var f = g.getContext("2d");
                      f.globalAlpha = 1;
                      f.globalCompositeOperation = "copy";
                      f.drawImage(a[3], 0, 0);
                      f.globalCompositeOperation = "lighter";
                      0 < b &&
                        ((f.globalAlpha = b / 255), f.drawImage(a[0], 0, 0));
                      0 < c &&
                        ((f.globalAlpha = c / 255), f.drawImage(a[1], 0, 0));
                      0 < d &&
                        ((f.globalAlpha = d / 255), f.drawImage(a[2], 0, 0));
                      a = new Ca();
                      a.frameWithCanvas(g, e, h);
                      return a;
                    };
                    this.generateRGBKs = function () {
                      var a = [],
                        e = t.createElement("canvas");
                      e.getContext("2d");
                      e.width = this.width;
                      e.height = this.height;
                      e = t.createElement("canvas");
                      e.width = this.width;
                      e.height = this.height;
                      e = e.getContext("2d");
                      e.drawImage(
                        d,
                        b,
                        f,
                        this.width,
                        this.height,
                        0,
                        0,
                        this.width,
                        this.height
                      );
                      for (
                        var c = e.getImageData(
                            0,
                            0,
                            this.width,
                            this.height
                          ).data,
                          h = c.length,
                          g = this.getImageCopy(),
                          k = this.getImageCopy(),
                          n = this.getImageCopy(),
                          e = this.getImageCopy(),
                          m = 0;
                        m < h;
                        m += 4
                      )
                        (g.toData[m] = c[m]),
                          (g.toData[m + 1] = 0),
                          (g.toData[m + 2] = 0),
                          (g.toData[m + 3] = c[m + 3]),
                          (k.toData[m] = 0),
                          (k.toData[m + 1] = c[m + 1]),
                          (k.toData[m + 2] = 0),
                          (k.toData[m + 3] = c[m + 3]),
                          (n.toData[m] = 0),
                          (n.toData[m + 1] = 0),
                          (n.toData[m + 2] = c[m + 2]),
                          (n.toData[m + 3] = c[m + 3]),
                          (e.toData[m] = 0),
                          (e.toData[m + 1] = 0),
                          (e.toData[m + 2] = 0),
                          (e.toData[m + 3] = c[m + 3]);
                      g.ctx.putImageData(g.to, 0, 0);
                      k.ctx.putImageData(k.to, 0, 0);
                      n.ctx.putImageData(n.to, 0, 0);
                      e.ctx.putImageData(e.to, 0, 0);
                      c = new Image();
                      c.src = g.canvas.toDataURL();
                      g = new Image();
                      g.src = k.canvas.toDataURL();
                      k = new Image();
                      k.src = n.canvas.toDataURL();
                      n = new Image();
                      n.src = e.canvas.toDataURL();
                      a.push(c);
                      a.push(g);
                      a.push(k);
                      a.push(n);
                      return a;
                    };
                    this.renderToCanvas = function () {
                      var a = t.createElement("canvas"),
                        e = a.getContext("2d");
                      a.width = this.width;
                      a.height = this.height;
                      var c = t.createElement("canvas");
                      c.width = this.width;
                      c.height = this.height;
                      c.getContext("2d");
                      d
                        ? e.drawImage(
                            d,
                            b,
                            f,
                            this.width,
                            this.height,
                            0,
                            0,
                            this.width,
                            this.height
                          )
                        : e.drawImage(
                            this.canvas,
                            0,
                            0,
                            this.width,
                            this.height,
                            0,
                            0,
                            this.width,
                            this.height
                          );
                      e.globalAlpha = 1;
                      e.drawImage(c, 0, 0);
                      return a;
                    };
                  },
                  Tb = function () {
                    var b = {},
                      f = [],
                      k = [],
                      g = [],
                      d = [];
                    this.addAnimationInfo = function (e, d) {
                      b[e] = d;
                    };
                    this.setAnimationInterval = function (e, d) {
                      b[e].setInterval(d);
                    };
                    this.createAnimation = function (e) {
                      e = b[e];
                      var d = new ub();
                      d.setup(e);
                      return d;
                    };
                    this.runAnimation = function (b) {
                      f.push(b);
                    };
                    this.runAnimationLayer2 = function (b) {
                      k.push(b);
                    };
                    this.runAnimationBehind = function (b) {
                      g.push(b);
                    };
                    this.addBlast = function (b, d, a, g, c) {
                      var f = V.createAnimation("explosion");
                      f.setScale(a);
                      f.posX = b;
                      f.posY = d;
                      V.runAnimationBehind(f);
                      a = sa;
                      f = ta;
                      b =
                        1 -
                        Math.sqrt((a - b) * (a - b) + (f - d) * (f - d)) /
                          PLAY_DISTANCE;
                      0.01 < b &&
                        soundManager.playSound(
                          SOUND_PLANE_EXPL,
                          b * c,
                          1,
                          g,
                          null
                        );
                    };
                    this.addExplosion = function (b, f, a, g) {
                      var c;
                      (c = !hb(b, f, 100)) || (c = !(50 > +new Date() - D));
                      c ||
                        (1 >= d.length &&
                          ((c = new Explosion()),
                          c.init(b, f, a, g),
                          d.push(c)),
                        this.addBlast(b, f, 1, PLAY_RULE_MAX3, 1),
                        y.shake());
                    };
                    this.update = function (b) {
                      for (var h in f) {
                        var a = f[h];
                        a.update(b);
                        a.deleting && (f.splice(h, 1), delete a);
                      }
                      for (h in g)
                        (a = g[h]),
                          a.update(b),
                          a.deleting && (g.splice(h, 1), delete a);
                      for (h in k)
                        (a = k[h]),
                          a.update(b),
                          a.deleting && (k.splice(h, 1), delete a);
                      for (var l in d)
                        (h = d[l]),
                          h.update(b),
                          h.deleting && (d.splice(l, 1), delete h);
                    };
                    this.drawBehind = function (b) {
                      for (var d in g) {
                        var a = g[d];
                        b.save();
                        b.translate(a.posX, a.posY);
                        b.scale(a.scaleX, a.scaleY);
                        b.rotate(a.rotation);
                        a.draw(b);
                        b.restore();
                      }
                    };
                    this.drawLayer2 = function (b) {
                      for (var d in k) {
                        var a = k[d];
                        b.save();
                        b.translate(a.posX, a.posY);
                        b.scale(a.scaleX, a.scaleY);
                        b.rotate(a.rotation);
                        a.draw(b);
                        b.restore();
                      }
                    };
                    this.draw = function (b) {
                      for (var d in f) {
                        var a = f[d];
                        b.save();
                        b.translate(a.posX, a.posY);
                        b.scale(a.scaleX, a.scaleY);
                        b.rotate(a.rotation);
                        a.draw(b);
                        b.restore();
                      }
                    };
                    this.drawExplosions = function (b) {
                      for (var f in d) d[f].draw(b);
                    };
                  },
                  ub = function () {
                    var b = 0,
                      f = 0,
                      k = 0;
                    this.frames;
                    this.frameCount = 0;
                    this.deleting = !1;
                    this.posY = this.posX = 0;
                    this.scaleY = this.scaleX = 1;
                    this.rotation = 0;
                    this.alpha = 1;
                    this.copy = function (b) {
                      b = new ub();
                      b.frames = this.frames;
                      b.frameCount = this.frameCount;
                      b.deleting = this.deleting;
                      b.posX = this.posX;
                      b.posY = this.posY;
                      b.scaleX = this.scaleX;
                      b.scaleY = this.scaleY;
                      b.rotation = this.rotation;
                      b.alpha = this.alpha;
                      b.setInterval(f);
                      return b;
                    };
                    this.setup = function (b) {
                      f = b.interval;
                      this.frames = b.frames;
                      this.frameCount = b.frames.length;
                    };
                    this.setInterval = function (b) {
                      f = b;
                    };
                    this.update = function (g) {
                      this.deleting ||
                        (k > f && (b++, (k -= f)),
                        (k += g),
                        b >= this.frameCount && (this.deleting = !0));
                    };
                    this.setScale = function (b) {
                      this.scaleY = this.scaleX = b;
                    };
                    this.draw = function (f) {
                      1 > this.alpha && (f.globalAlpha = this.alpha);
                      this.frames[b].draw(f);
                    };
                  };
                gameSheetInfo = [
                  ["car", 223, 347, 22, 43, 0.5, 0.512],
                  ["car_glow", 206, 141, 38, 59, 0.5, 0.508],
                  ["car_l1_min", 226, 392, 20, 39, 0.5, 0.526],
                  ["car_l2_min", 235, 61, 10, 28, 0.5, 0.446],
                  ["car_l3_min", 170, 409, 22, 43, 0.5, 0.5],
                  ["car_l3_min_glow", 183, 306, 38, 59, 0.5, 0.508],
                  ["car_shock", 206, 2, 40, 57, 0.525, 0.526],
                  ["core", 2, 2, 100, 100, 0.5, 0.5],
                  ["core_charge", 2, 104, 100, 100, 0.5, 0.5],
                  ["crown", 170, 454, 31, 27, 0.5, 0.5],
                  ["decay_alert", 235, 91, 9, 20, 0.5, 0.5],
                  ["energy", 2, 408, 82, 82, 0.5, 0.5],
                  ["energy2", 102, 308, 79, 79, 0.5, 0.5],
                  ["grid", 104, 2, 100, 100, 0.5, 0.5],
                  ["grid_green", 2, 206, 100, 100, 0.5, 0.5],
                  ["grid_mask", 2, 308, 98, 98, 0.5, 0.505],
                  ["grid_mask_hard", 104, 206, 98, 98, 0.5, 0.505],
                  ["grid_red", 104, 104, 100, 100, 0.5, 0.5],
                  ["pause", 194, 409, 30, 34, 0.5, 0.735],
                  ["powerup_part", 204, 206, 42, 85, 0.5, 0.5],
                  ["powerup_part1", 203, 445, 19, 29, 0.289, 0.5],
                  ["powerup_part2", 223, 293, 22, 52, 0.386, 0.5],
                  ["powerup_part3", 206, 61, 27, 78, 0.5, 0.5],
                  ["powerup_redflail", 183, 367, 38, 40, 0.5, 0.5],
                  ["tri", 86, 408, 82, 82, 0.5, 0.5],
                ];
                var Kb = function () {
                    this.tailAddJointInterval = 50;
                    this.timeToNextJoint = 0;
                    this.tailJoints = [[]];
                    this.trailTime = 400;
                    this.trailTimeEffectStart = 600;
                    this.trailEffectTime = 0;
                    this.enabled = !1;
                    this.width = 1.2;
                    var b, f;
                    this.fixedColor = !1;
                    this.style;
                    this.update = function (k) {
                      var g = this.tailJoints.length - 1;
                      if (0 >= this.timeToNextJoint && -1 < g) {
                        this.timeToNextJoint = this.tailAddJointInterval;
                        this.enabled &&
                          this.tailJoints[g].push({
                            x: b,
                            y: f,
                            origX: b,
                            origY: f,
                            t: D,
                            fx:
                              (600 - Math.abs(this.trailEffectTime - 600)) /
                              600,
                            style: this.style,
                          });
                        for (var d = 0; d <= g; d++) {
                          var e = this.tailJoints[d].length;
                          if (0 < e) {
                            e = D - this.tailJoints[d][0].t;
                            e > this.trailTime &&
                              (this.tailJoints[d].splice(0, 1),
                              0 == this.tailJoints[d].length &&
                                this.tailJoints.splice(d, 1));
                            break;
                          }
                        }
                      }
                      for (
                        var h = this.timeToNextJoint / 50,
                          g = this.tailJoints.length - 1,
                          d = 0;
                        d <= g;
                        d++
                      )
                        (e = this.tailJoints[d].length),
                          1 >= e ||
                            ((e = D - this.tailJoints[d][0].t),
                            e > this.trailTime - this.tailAddJointInterval &&
                              ((e =
                                this.tailJoints[d][0].origY -
                                this.tailJoints[d][1].origY),
                              (this.tailJoints[d][0].x =
                                this.tailJoints[d][1].origX +
                                (this.tailJoints[d][0].origX -
                                  this.tailJoints[d][1].origX) *
                                  h),
                              (this.tailJoints[d][0].y =
                                this.tailJoints[d][1].origY + e * h)));
                      this.timeToNextJoint -= k;
                      this.trailEffectTime =
                        0 > this.trailEffectTime ? 0 : this.trailEffectTime - k;
                    };
                    this.draw = function (b) {
                      if (Xa && R)
                        for (var f = this.tailJoints.length, d = 0; d < f; d++)
                          for (
                            var e = this.tailJoints[d].length, h = 0;
                            h < e - 1;
                            h++
                          ) {
                            b.strokeStyle = this.tailJoints[d][h].style;
                            var a =
                              (h / e) * (8 + 8 * this.tailJoints[d][h].fx);
                            0 == a && (a = 0.1);
                            b.lineWidth = a * this.width;
                            b.beginPath();
                            b.lineTo(
                              this.tailJoints[d][h].x,
                              this.tailJoints[d][h].y
                            );
                            b.lineTo(
                              this.tailJoints[d][h + 1].x,
                              this.tailJoints[d][h + 1].y
                            );
                            b.stroke();
                          }
                    };
                    this.setPosition = function (k, g) {
                      b = k;
                      f = g;
                    };
                    this.push = function () {
                      this.tailJoints.push([]);
                    };
                    this.trailEffect = function () {
                      this.trailEffectTime = 1200;
                    };
                    this.clear = function () {
                      this.tailJoints = [[]];
                    };
                  },
                  Rb = function () {
                    this.id = -1;
                    this.dstY =
                      this.dstX =
                      this.origY =
                      this.origX =
                      this.prevY =
                      this.prevX =
                      this.y =
                      this.x =
                        0;
                    this.energy = 255;
                    this.nick = "";
                    this.hue = 0;
                    this.lastUpdateTime;
                    var b = (this.killedByID = 0),
                      f,
                      k,
                      g = 0;
                    this.canInterpolate = this.beingDeleted = !1;
                    this.beginGraby = this.beginGrabX = this.blendIn = 0;
                    this.flailGrabbed = !1;
                    var d = 0,
                      e = 0;
                    this.update = function (b) {
                      b *= 0.06;
                      if (this.beingDeleted) {
                        var a = A[this.killedByID];
                        if (a) {
                          var f = Math.pow(g, 2),
                            c;
                          this.flailGrabbed
                            ? ((c = a.flailX), (a = a.flailY))
                            : ((c = a.x), (a = a.y));
                          this.x = this.beginGrabX + (c - this.beginGrabX) * f;
                          this.y = this.beginGrabY + (a - this.beginGrabY) * f;
                        }
                        g += 0.07 * b;
                        1 < g && delete A[this.id];
                      } else
                        (f = T((D - this.lastUpdateTime) / W, 0, 1)),
                          (this.prevX = this.x),
                          (this.prevY = this.y),
                          (c = f * (this.dstY - this.origY) + this.origY),
                          (this.x = f * (this.dstX - this.origX) + this.origX),
                          (this.y = c),
                          (d += 0.01 * b),
                          (e += 0.08 * b);
                      1 > this.blendIn &&
                        ((this.blendIn += (1 - this.blendIn) / 8),
                        0.99 < this.blendIn && (this.blendIn = 1));
                    };
                    this.drawAfter = function (b) {};
                    this.draw = function (h) {
                      if (this.canInterpolate) {
                        var a = this.x,
                          l = this.y;
                        this.beingDeleted &&
                          ((a = this.beginGrabX), (l = this.beginGrabY));
                        h.save();
                        h.translate(a, l);
                        var c = (((Math.sin(e) + 1) / 2) * 0.6 + 0.4) * (1 - g);
                        h.scale(2 * this.blendIn, 2 * this.blendIn);
                        h.globalAlpha = c;
                        f.draw(h);
                        h.globalAlpha = 1;
                        h.scale(1 / (2 * this.blendIn), 1 / (2 * this.blendIn));
                        h.scale(1.5 * this.blendIn, 1.5 * this.blendIn);
                        h.scale(1 * this.blendIn, 1 * this.blendIn);
                        h.globalAlpha = 1 - g;
                        h.fillStyle = "#012426";
                        h.beginPath();
                        h.arc(0, 0, 35, 0, 2 * Math.PI);
                        h.fill();
                        h.closePath();
                        h.restore();
                        h.globalAlpha = 0.3 * (1 - g);
                        gb(h, a, l, d, g, this.blendIn);
                        h.globalAlpha = 1;
                        h.save();
                        h.translate(this.x, this.y);
                        h.rotate(-d);
                        b += 0.1;
                        a = 1.2 - 0.05 * Math.sin(b);
                        l = 1.2 + 0.05 * Math.sin(b);
                        this.beingDeleted &&
                          ((a *= 0.5 + 0.5 * (1 - g)),
                          (l *= 0.5 + 0.5 * (1 - g)));
                        h.scale(a * this.blendIn, l * this.blendIn);
                        h.globalAlpha = 0.8 * c;
                        k.draw(h);
                        h.globalAlpha = 1;
                        q.frames.powerup_redflail.draw(h);
                        h.restore();
                      }
                    };
                    this.drawInput = function (b) {};
                    this.drawInfo = function (b) {};
                    this.updateNetwork = function (b, a, d) {
                      var c;
                      c = b.getFloat32(a, !0);
                      a += 4;
                      b = -b.getFloat32(a, !0);
                      a += 4;
                      this.origX = this.x;
                      this.origY = this.y;
                      this.dstX = 10 * c;
                      this.dstY = 10 * b;
                      d
                        ? ((this.origX = this.dstX),
                          (this.origY = this.dstY),
                          (this.x = this.dstX),
                          (this.y = this.dstY),
                          (f =
                            q.frames.grid_mask_hard.renderTintedFrame(
                              "#00FFFF"
                            )),
                          (k =
                            q.frames.grid_mask_hard.renderTintedFrame(
                              "#FF0000"
                            )))
                        : (this.canInterpolate = !0);
                      this.lastUpdateTime = D;
                      return a;
                    };
                    this.deleteNetwork = function (b, a) {
                      if (U && 0 != this.killReason)
                        return (
                          (this.flailGrabbed = b.getUint8(a)),
                          a++,
                          (this.beingDeleted = !0),
                          (this.beginGrabX = this.x),
                          (this.beginGrabY = this.y),
                          a
                        );
                      delete A[this.id];
                      return ++a;
                    };
                    this.resume = function () {};
                    this.cleanup = function () {};
                    this.setKilledBy = function (b) {
                      this.killedByID = b;
                    };
                  };
                n.onload = function () {
                  null == E &&
                    (n.devicePixelRatio &&
                      (Na = 1 < n.devicePixelRatio ? 2 : 1),
                    (E = new Vb(t.getElementById("canvas"))),
                    n.addEventListener("resize", E.resize, !1),
                    (L = new Fb()),
                    L.addListeners(),
                    n.requestAnimationFrame
                      ? n.requestAnimationFrame(Za)
                      : setInterval(Za, 1e3 / 60),
                    m("#overlay").show());
                  E.resize();
                  cb();
                };
              })(window, document, jQuery);
            </script>
          </div></font
        ></a
      >
    </footer>
  </body>
</html>
